<?xml version='1.0' encoding='utf-8' ?>

<!-- build 9300.16.0811.1521                                -->
<workbook source-build='9.3.6 (9300.16.0811.1521)' source-platform='win' version='9.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='year_2010' inline='true' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' version='9.3'>
      <connection class='textscan' directory='C:/Users/dory/Documents/GitHub/popsyn3/validation' filename='year_2010.csv' password='' server=''>
        <relation name='year_2010.csv' table='[year_2010#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='geography_index' ordinal='0' />
            <column datatype='integer' name='control_households' ordinal='1' />
            <column datatype='string' name='measure' ordinal='2' />
            <column datatype='integer' name='synthesized_households' ordinal='3' />
            <column datatype='string' name='geography' ordinal='4' />
            <column datatype='integer' name='control_persons' ordinal='5' />
            <column datatype='integer' name='synthesized_persons' ordinal='6' />
            <column datatype='string' name='measure_category' ordinal='7' />
          </columns>
        </relation>
        <refresh increment-key='' incremental-updates='false' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>geography_index</remote-name>
            <remote-type>20</remote-type>
            <local-name>[geography_index]</local-name>
            <parent-name>[year_2010.csv]</parent-name>
            <remote-alias>geography_index</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>control_households</remote-name>
            <remote-type>20</remote-type>
            <local-name>[control_households]</local-name>
            <parent-name>[year_2010.csv]</parent-name>
            <remote-alias>control_households</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>measure</remote-name>
            <remote-type>129</remote-type>
            <local-name>[measure]</local-name>
            <parent-name>[year_2010.csv]</parent-name>
            <remote-alias>measure</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>synthesized_households</remote-name>
            <remote-type>20</remote-type>
            <local-name>[synthesized_households]</local-name>
            <parent-name>[year_2010.csv]</parent-name>
            <remote-alias>synthesized_households</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>geography</remote-name>
            <remote-type>129</remote-type>
            <local-name>[geography]</local-name>
            <parent-name>[year_2010.csv]</parent-name>
            <remote-alias>geography</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>control_persons</remote-name>
            <remote-type>20</remote-type>
            <local-name>[control_persons]</local-name>
            <parent-name>[year_2010.csv]</parent-name>
            <remote-alias>control_persons</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>synthesized_persons</remote-name>
            <remote-type>20</remote-type>
            <local-name>[synthesized_persons]</local-name>
            <parent-name>[year_2010.csv]</parent-name>
            <remote-alias>synthesized_persons</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>measure_category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[measure_category]</local-name>
            <parent-name>[year_2010.csv]</parent-name>
            <remote-alias>measure_category</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[year_2010.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' value='Control Persons' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' value='Synthesized Households' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' value='Synthesized Persons' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1000925085783920642:qk]&quot;' value='Root Mean Square Error' />
        </aliases>
      </column>
      <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
      </column>
      <column caption='Error Squared' datatype='integer' name='[Calculation_1000925085783777281]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Calculation_1000925085773357056]*[Calculation_1000925085773357056]' />
      </column>
      <column caption='sqrt(avg([Error Squared]))' datatype='real' name='[Calculation_1000925085783920642]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sqrt(avg([Calculation_1000925085783777281]))' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
      <column caption='Geography' datatype='string' name='[geography]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;county&quot;' value='County' />
          <alias key='&quot;maz&quot;' value='MAZ' />
          <alias key='&quot;taz&quot;' value='TAZ' />
        </aliases>
      </column>
      <column caption='Geography Index' datatype='integer' name='[geography_index]' role='dimension' type='ordinal' />
      <column caption='Measure' datatype='string' name='[measure]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;age_00_18&quot;' value='Persons under age 18' />
          <alias key='&quot;age_19_64&quot;' value='Persons age 19 to 64' />
          <alias key='&quot;age_65_up&quot;' value='Persons age 65 and older' />
          <alias key='&quot;hh_income_quartile_1&quot;' value='Households in Lowest Income Quartile' />
          <alias key='&quot;hh_income_quartile_2&quot;' value='Households in Medium Low Income Quartile' />
          <alias key='&quot;hh_income_quartile_3&quot;' value='Households in Medium High Income Quartile' />
          <alias key='&quot;hh_income_quartile_4&quot;' value='Households in Highest Income Quartile' />
          <alias key='&quot;hh_size_1&quot;' value='Households with 1 Person' />
          <alias key='&quot;hh_size_2&quot;' value='Households with 2 People' />
          <alias key='&quot;hh_size_3&quot;' value='Households with 3 People' />
          <alias key='&quot;hh_size_4_plus&quot;' value='Households with 4 or more People' />
          <alias key='&quot;hh_workers_0&quot;' value='Households with 0 Workers' />
          <alias key='&quot;hh_workers_1&quot;' value='Households with 1 Worker' />
          <alias key='&quot;hh_workers_2&quot;' value='Households with 2 Workers' />
          <alias key='&quot;hh_workers_3_plus&quot;' value='Households with 3 or more Workers' />
          <alias key='&quot;households&quot;' value='Households' />
          <alias key='&quot;occupation_management&quot;' value='Persons in Management occupations' />
          <alias key='&quot;occupation_manual&quot;' value='Persons in Manual occupations' />
          <alias key='&quot;occupation_military&quot;' value='Persons in Military Occupations' />
          <alias key='&quot;occupation_professional&quot;' value='Persons in Professional Occupations' />
          <alias key='&quot;occupation_retail&quot;' value='Persons in Retail Occupations' />
          <alias key='&quot;occupation_services&quot;' value='Persons in Service Occupations' />
        </aliases>
      </column>
      <column caption='Measure Category' datatype='string' name='[measure_category]' role='dimension' type='nominal' />
      <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
      <column-instance column='[measure]' derivation='None' name='[none:measure:nk]' pivot='key' type='nominal' />
      <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
      <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
      <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1000925085783920642]' derivation='User' name='[usr:Calculation_1000925085783920642:qk]' pivot='key' type='quantitative' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='C:\Users\dory\Documents\GitHub\popsyn3\validation\year_2010.tde' schema='Extract' tablename='Extract' update-time='10/13/2016 09:27:12 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Calculation_1000925085773357056]' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            <calculation column='[Calculation_1000925085783777281]' formula='[Calculation_1000925085773357056]*[Calculation_1000925085773357056]' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='58690' timestamp-start='2016-10-13 21:27:12.074' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Calculation_1000925085773357056</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Calculation_1000925085773357056]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Calculation_1000925085773357056</remote-alias>
              <ordinal>0</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>190</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>-36341</statistic>
                <statistic aggregation='Max' datatype='integer'>23065</statistic>
                <statistic aggregation='Count' datatype='integer'>53875</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Calculation_1000925085783777281</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Calculation_1000925085783777281]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Calculation_1000925085783777281</remote-alias>
              <ordinal>1</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>173</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1320668281</statistic>
                <statistic aggregation='Count' datatype='integer'>53875</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Number of Records</remote-name>
              <remote-type>16</remote-type>
              <local-name>[Number of Records]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Number of Records</remote-alias>
              <ordinal>2</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>58690.0</statistic>
                <statistic aggregation='Avg' datatype='real'>1.0</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.0</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.0</statistic>
                <statistic aggregation='Var' datatype='real'>0.0</statistic>
                <statistic aggregation='VarP' datatype='real'>0.0</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
                <statistic aggregation='Median' datatype='integer'>1</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>58690.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>control_households</remote-name>
              <remote-type>3</remote-type>
              <local-name>[control_households]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>control_households</remote-alias>
              <ordinal>3</ordinal>
              <family>year_2010.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>903</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>247197</statistic>
                <statistic aggregation='Count' datatype='integer'>58609</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>control_persons</remote-name>
              <remote-type>3</remote-type>
              <local-name>[control_persons]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>control_persons</remote-alias>
              <ordinal>4</ordinal>
              <family>year_2010.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>82</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>45</statistic>
                <statistic aggregation='Max' datatype='integer'>1132622</statistic>
                <statistic aggregation='Count' datatype='integer'>81</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>geography</remote-name>
              <remote-type>129</remote-type>
              <local-name>[geography]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>geography</remote-alias>
              <ordinal>5</ordinal>
              <family>year_2010.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;county&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;taz&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
                <statistic aggregation='Median' datatype='string'>&quot;maz&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>geography_index</remote-name>
              <remote-type>3</remote-type>
              <local-name>[geography_index]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>geography_index</remote-alias>
              <ordinal>6</ordinal>
              <family>year_2010.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>39785</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>835407834.0</statistic>
                <statistic aggregation='Avg' datatype='real'>14234.244913954677</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>39785</statistic>
                <statistic aggregation='Stdev' datatype='real'>12546.145974181052</statistic>
                <statistic aggregation='StdevP' datatype='real'>12546.03908885632</statistic>
                <statistic aggregation='Var' datatype='real'>157405778.80545941</statistic>
                <statistic aggregation='VarP' datatype='real'>157403096.81911072</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>21129387464506.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>measure</remote-name>
              <remote-type>129</remote-type>
              <local-name>[measure]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>measure</remote-alias>
              <ordinal>7</ordinal>
              <family>year_2010.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>22</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;age_00_18&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;occupation_services&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>measure_category</remote-name>
              <remote-type>129</remote-type>
              <local-name>[measure_category]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>measure_category</remote-alias>
              <ordinal>8</ordinal>
              <family>year_2010.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>6</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Households&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Persons by Occupation&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>synthesized_households</remote-name>
              <remote-type>3</remote-type>
              <local-name>[synthesized_households]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>synthesized_households</remote-alias>
              <ordinal>9</ordinal>
              <family>year_2010.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>904</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>248256</statistic>
                <statistic aggregation='Count' datatype='integer'>53794</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>synthesized_persons</remote-name>
              <remote-type>3</remote-type>
              <local-name>[synthesized_persons]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>synthesized_persons</remote-alias>
              <ordinal>10</ordinal>
              <family>year_2010.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>81</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>55</statistic>
                <statistic aggregation='Max' datatype='integer'>1096281</statistic>
                <statistic aggregation='Count' datatype='integer'>81</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.519108' measure-ordering='alphabetic' measure-percentage='0.480892' show-aliased-fields='true' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <sort class='manual' column='[none:measure:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;households&quot;</bucket>
            <bucket>&quot;hh_income_quartile_1&quot;</bucket>
            <bucket>&quot;hh_income_quartile_2&quot;</bucket>
            <bucket>&quot;hh_income_quartile_3&quot;</bucket>
            <bucket>&quot;hh_income_quartile_4&quot;</bucket>
            <bucket>&quot;hh_size_1&quot;</bucket>
            <bucket>&quot;hh_size_2&quot;</bucket>
            <bucket>&quot;hh_size_3&quot;</bucket>
            <bucket>&quot;hh_size_4_plus&quot;</bucket>
            <bucket>&quot;hh_workers_0&quot;</bucket>
            <bucket>&quot;hh_workers_1&quot;</bucket>
            <bucket>&quot;hh_workers_2&quot;</bucket>
            <bucket>&quot;hh_workers_3_plus&quot;</bucket>
            <bucket>&quot;age_00_18&quot;</bucket>
            <bucket>&quot;age_19_64&quot;</bucket>
            <bucket>&quot;age_65_up&quot;</bucket>
            <bucket>&quot;occupation_professional&quot;</bucket>
            <bucket>&quot;occupation_services&quot;</bucket>
            <bucket>&quot;occupation_manual&quot;</bucket>
            <bucket>&quot;occupation_retail&quot;</bucket>
            <bucket>&quot;occupation_management&quot;</bucket>
            <bucket>&quot;occupation_military&quot;</bucket>
          </dictionary>
        </sort>
      </default-sorts>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='controls.check sums'>
      <table>
        <view>
          <datasources>
            <datasource caption='year_2010' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' />
          </datasources>
          <datasource-dependencies datasource='textscan.1xanw0j0w61gh80zu3baj0rtv7sd'>
            <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            </column>
            <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
            <column caption='Measure Category' datatype='string' name='[measure_category]' role='dimension' type='nominal' />
            <column-instance column='[measure_category]' derivation='None' name='[none:measure_category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1000925085773357056]' derivation='Sum' name='[sum:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_households]' derivation='Sum' name='[sum:control_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='117' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]' value='74' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='92' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]' value='320' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Source Sans Pro' />
            <format attr='font-size' value='14' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[Multiple Values]' />
            </encodings>
            <customized-tooltip>
              <formatted-text />
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]</rows>
        <cols>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='controls.county deep dive'>
      <table>
        <view>
          <datasources>
            <datasource caption='year_2010' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' />
          </datasources>
          <datasource-dependencies datasource='textscan.1xanw0j0w61gh80zu3baj0rtv7sd'>
            <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            </column>
            <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
            <column caption='Geography' datatype='string' name='[geography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;county&quot;' value='County' />
                <alias key='&quot;maz&quot;' value='MAZ' />
                <alias key='&quot;taz&quot;' value='TAZ' />
              </aliases>
            </column>
            <column caption='Geography Index' datatype='integer' name='[geography_index]' role='dimension' type='ordinal' />
            <column caption='Measure' datatype='string' name='[measure]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;age_00_18&quot;' value='Persons under age 18' />
                <alias key='&quot;age_19_64&quot;' value='Persons age 19 to 64' />
                <alias key='&quot;age_65_up&quot;' value='Persons age 65 and older' />
                <alias key='&quot;hh_income_quartile_1&quot;' value='Households in Lowest Income Quartile' />
                <alias key='&quot;hh_income_quartile_2&quot;' value='Households in Medium Low Income Quartile' />
                <alias key='&quot;hh_income_quartile_3&quot;' value='Households in Medium High Income Quartile' />
                <alias key='&quot;hh_income_quartile_4&quot;' value='Households in Highest Income Quartile' />
                <alias key='&quot;hh_size_1&quot;' value='Households with 1 Person' />
                <alias key='&quot;hh_size_2&quot;' value='Households with 2 People' />
                <alias key='&quot;hh_size_3&quot;' value='Households with 3 People' />
                <alias key='&quot;hh_size_4_plus&quot;' value='Households with 4 or more People' />
                <alias key='&quot;hh_workers_0&quot;' value='Households with 0 Workers' />
                <alias key='&quot;hh_workers_1&quot;' value='Households with 1 Worker' />
                <alias key='&quot;hh_workers_2&quot;' value='Households with 2 Workers' />
                <alias key='&quot;hh_workers_3_plus&quot;' value='Households with 3 or more Workers' />
                <alias key='&quot;households&quot;' value='Households' />
                <alias key='&quot;occupation_management&quot;' value='Persons in Management occupations' />
                <alias key='&quot;occupation_manual&quot;' value='Persons in Manual occupations' />
                <alias key='&quot;occupation_military&quot;' value='Persons in Military Occupations' />
                <alias key='&quot;occupation_professional&quot;' value='Persons in Professional Occupations' />
                <alias key='&quot;occupation_retail&quot;' value='Persons in Retail Occupations' />
                <alias key='&quot;occupation_services&quot;' value='Persons in Service Occupations' />
              </aliases>
            </column>
            <column caption='Measure Category' datatype='string' name='[measure_category]' role='dimension' type='nominal' />
            <column-instance column='[geography]' derivation='None' name='[none:geography:nk]' pivot='key' type='nominal' />
            <column-instance column='[geography_index]' derivation='None' name='[none:geography_index:ok]' pivot='key' type='ordinal' />
            <column-instance column='[measure]' derivation='None' name='[none:measure:nk]' pivot='key' type='nominal' />
            <column-instance column='[measure_category]' derivation='None' name='[none:measure_category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1000925085773357056]' derivation='Sum' name='[sum:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_households]' derivation='Sum' name='[sum:control_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]'>
            <groupfilter function='member' level='[none:geography:nk]' member='&quot;county&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]'>
            <groupfilter function='level-members' level='[none:geography_index:ok]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</column>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</column>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' value='54' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='117' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]' value='74' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]' value='31' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]' value='148' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='92' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' value='124' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]' value='164' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Source Sans Pro' />
            <format attr='font-size' value='14' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[Multiple Values]' />
            </encodings>
            <customized-tooltip>
              <formatted-text />
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk] / ([textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk] / [textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]))</rows>
        <cols>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='controls.individual'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='false' fontsize='20'>Household Control Statistics: </run>
            <run fontsize='20'>&lt;Page Name&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='year_2010' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' />
          </datasources>
          <datasource-dependencies datasource='textscan.1xanw0j0w61gh80zu3baj0rtv7sd'>
            <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            </column>
            <column caption='Error Squared' datatype='integer' name='[Calculation_1000925085783777281]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Calculation_1000925085773357056]*[Calculation_1000925085773357056]' />
            </column>
            <column caption='sqrt(avg([Error Squared]))' datatype='real' name='[Calculation_1000925085783920642]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sqrt(avg([Calculation_1000925085783777281]))' />
            </column>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column-instance column='[Calculation_1000925085773357056]' derivation='Avg' name='[avg:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
            <column caption='Measure' datatype='string' name='[measure]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;age_00_18&quot;' value='Persons under age 18' />
                <alias key='&quot;age_19_64&quot;' value='Persons age 19 to 64' />
                <alias key='&quot;age_65_up&quot;' value='Persons age 65 and older' />
                <alias key='&quot;hh_income_quartile_1&quot;' value='Households in Lowest Income Quartile' />
                <alias key='&quot;hh_income_quartile_2&quot;' value='Households in Medium Low Income Quartile' />
                <alias key='&quot;hh_income_quartile_3&quot;' value='Households in Medium High Income Quartile' />
                <alias key='&quot;hh_income_quartile_4&quot;' value='Households in Highest Income Quartile' />
                <alias key='&quot;hh_size_1&quot;' value='Households with 1 Person' />
                <alias key='&quot;hh_size_2&quot;' value='Households with 2 People' />
                <alias key='&quot;hh_size_3&quot;' value='Households with 3 People' />
                <alias key='&quot;hh_size_4_plus&quot;' value='Households with 4 or more People' />
                <alias key='&quot;hh_workers_0&quot;' value='Households with 0 Workers' />
                <alias key='&quot;hh_workers_1&quot;' value='Households with 1 Worker' />
                <alias key='&quot;hh_workers_2&quot;' value='Households with 2 Workers' />
                <alias key='&quot;hh_workers_3_plus&quot;' value='Households with 3 or more Workers' />
                <alias key='&quot;households&quot;' value='Households' />
                <alias key='&quot;occupation_management&quot;' value='Persons in Management occupations' />
                <alias key='&quot;occupation_manual&quot;' value='Persons in Manual occupations' />
                <alias key='&quot;occupation_military&quot;' value='Persons in Military Occupations' />
                <alias key='&quot;occupation_professional&quot;' value='Persons in Professional Occupations' />
                <alias key='&quot;occupation_retail&quot;' value='Persons in Retail Occupations' />
                <alias key='&quot;occupation_services&quot;' value='Persons in Service Occupations' />
              </aliases>
            </column>
            <column-instance column='[measure]' derivation='None' name='[none:measure:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1000925085773357056]' derivation='Stdev' name='[std:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1000925085773357056]' derivation='Sum' name='[sum:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_households]' derivation='Sum' name='[sum:control_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1000925085783920642]' derivation='User' name='[usr:Calculation_1000925085783920642:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Number of Records:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1000925085773357056:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1000925085783920642:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[std:Calculation_1000925085773357056:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Number of Records:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1000925085773357056:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1000925085783920642:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[std:Calculation_1000925085773357056:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='117' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='46' />
            <format attr='width' value='136' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]' value='392' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='92' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='240' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]' value='88' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Source Sans Pro' />
            <format attr='font-size' value='14' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[Multiple Values]' />
            </encodings>
            <customized-tooltip>
              <formatted-text />
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</rows>
        <cols />
        <pages>
          <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='controls.summary'>
      <table>
        <view>
          <datasources>
            <datasource caption='year_2010' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' />
          </datasources>
          <datasource-dependencies datasource='textscan.1xanw0j0w61gh80zu3baj0rtv7sd'>
            <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            </column>
            <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
            <column caption='Geography' datatype='string' name='[geography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;county&quot;' value='County' />
                <alias key='&quot;maz&quot;' value='MAZ' />
                <alias key='&quot;taz&quot;' value='TAZ' />
              </aliases>
            </column>
            <column caption='Measure' datatype='string' name='[measure]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;age_00_18&quot;' value='Persons under age 18' />
                <alias key='&quot;age_19_64&quot;' value='Persons age 19 to 64' />
                <alias key='&quot;age_65_up&quot;' value='Persons age 65 and older' />
                <alias key='&quot;hh_income_quartile_1&quot;' value='Households in Lowest Income Quartile' />
                <alias key='&quot;hh_income_quartile_2&quot;' value='Households in Medium Low Income Quartile' />
                <alias key='&quot;hh_income_quartile_3&quot;' value='Households in Medium High Income Quartile' />
                <alias key='&quot;hh_income_quartile_4&quot;' value='Households in Highest Income Quartile' />
                <alias key='&quot;hh_size_1&quot;' value='Households with 1 Person' />
                <alias key='&quot;hh_size_2&quot;' value='Households with 2 People' />
                <alias key='&quot;hh_size_3&quot;' value='Households with 3 People' />
                <alias key='&quot;hh_size_4_plus&quot;' value='Households with 4 or more People' />
                <alias key='&quot;hh_workers_0&quot;' value='Households with 0 Workers' />
                <alias key='&quot;hh_workers_1&quot;' value='Households with 1 Worker' />
                <alias key='&quot;hh_workers_2&quot;' value='Households with 2 Workers' />
                <alias key='&quot;hh_workers_3_plus&quot;' value='Households with 3 or more Workers' />
                <alias key='&quot;households&quot;' value='Households' />
                <alias key='&quot;occupation_management&quot;' value='Persons in Management occupations' />
                <alias key='&quot;occupation_manual&quot;' value='Persons in Manual occupations' />
                <alias key='&quot;occupation_military&quot;' value='Persons in Military Occupations' />
                <alias key='&quot;occupation_professional&quot;' value='Persons in Professional Occupations' />
                <alias key='&quot;occupation_retail&quot;' value='Persons in Retail Occupations' />
                <alias key='&quot;occupation_services&quot;' value='Persons in Service Occupations' />
              </aliases>
            </column>
            <column-instance column='[geography]' derivation='None' name='[none:geography:nk]' pivot='key' type='nominal' />
            <column-instance column='[measure]' derivation='None' name='[none:measure:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1000925085773357056]' derivation='Sum' name='[sum:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_households]' derivation='Sum' name='[sum:control_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='alphabetic' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' direction='DESC' />
          <slices>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' value='54' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='117' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]' value='392' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='92' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' value='124' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Source Sans Pro' />
            <format attr='font-size' value='14' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[Multiple Values]' />
            </encodings>
            <customized-tooltip>
              <formatted-text />
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk] / [textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk])</rows>
        <cols>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</cols>
      </table>
    </worksheet>
  </worksheets>
  <windows source-height='28'>
    <window class='worksheet' name='controls.summary'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='controls.individual'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='89'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>&quot;hh_size_1&quot;</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='controls.check sums'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='controls.county deep dive'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='controls.summary' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='controls.individual' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='controls.check sums' width='192'>
      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
      zsJtQyNH3wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='controls.county deep dive' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7EAAAOxAGVKw4b
      AAAgAElEQVR4nO3d2ZNbV57g9y/uxb4DiQSQ+55kJldRErWNSlJtXVU94+7pccS4/TIRHXb0
      jB8cjmhP+H9wOBz22OPxTIRjuqsXe3q62+WprlappFJRlCgV9yWZzH1PLIl9x92vHyipS6pM
      FclEigR5Py/MIBK/PLjAD/ecc8/9HZtpmiYWyzNKeNwNsFgeJysBLM80KwEszzQrASzPNCsB
      LM80KwEszzQrASzPNCsBnlHFvRTVpvxIz93Y2OCgq0d7qV0Uff8HG5UCuVLtkf7mo8pndqi3
      1QMftxKgq5ncvfohP/zTP2NxI4Ouaei6ga7raJ/+/PEH71JpKmiahqbrn//OzY/fYyVV/kK0
      9Npd/vhPfsjVO8tomo7xaZzPYt36+OekyxJ/9Zf/AUVVMU0TTVPRDePT39XJZXZoKzqKoqDr
      xt8/buis373K5bvrj/RKM5sL/MkPf8jS8uq+r/OD99+lKam/9jovX/g7tvLNL8TaXrrJH//w
      T7l5bx37Ix97y+Onq/z4vU/4l//Dv0Sr5/hX/9u/BkFkoi/ATlnG7gpS2ryNag/yi3d/yje/
      9SY3rt/CtNmZSHoIfylcq1ElmyvxvBP+zf/57xiIuDAdDtKlNrrNj6syT58Uol0r8G/+l/+R
      l7/5fX781/+RxMRp3I0NQhMvoexcRffH+et//6958we/y/s/fZv4xCmieoG6rDB0tu+RXurb
      P3mb3/r9f07ILPKv/vf/A0QHwxGRXMvE5Yuxs3AFlzfA3779M37rW69z7cZdEByMRH/9bNSo
      VdjLV3A7DOsM0NUEO/0RNx9eusTC8hqG6MJU26i6znMvvoquKowM9hEM+HGHe3nu2DCG6MZU
      JQS7g3q9/oVwojvAi6fG+dkHV5kZjLBWgYGIl1MvvgTtJqOjowSCATzBGOdOjFPI57D7Ihyf
      GmNicopbN24AoEkNbIF+elw6dl+EmalRSrUmPeHAI7/UkcEkl3/5MWsrS9icPnS5ha7rvHD+
      NVRNZ7g/STDgwx/r58R4HzanF01qYnc4f+11OrxhXpgZ4Gcf3cJmrQXqbrqmsL2dIjk4RLta
      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
      T//v9OnTnz9+Ymb60G26de0yqmYwdvo8iaD70PEsX62U2eDirU3GelzgjXDs+DRum8RPf/YJ
      s6dPUcluUWmqjAzGSGXzJIaPMzEY2zfW0S6FMDV+9pOfcOa1b5OIPPxdQN3i8oc/J1ts8Pp3
      vk/U53zczXmqmYbKBxc/RjdNxvrjZPayTJ5+hYTf5JfX5lBNAV1uMtbj4dJaid/77W/wyaW7
      vPXm/j2Qo+3A2ux89x/+Tkc//LViljtz86RzRb6cudn1eW6v7r/CEQyWl1a+MrbcKHDt1tJD
      t8njC5DsDdNsPVqZEcuDU6UWgWCQXL6Awxsg6HFQLhXYShUYGh5CajWx20wyFYmJvjAbq2sE
      enoPjPeFM4BpmmytLlBsmZw5NXvgCrqDlAs53P4Ab7/9Lr/7j/+zI8mupas/xz3xDRavvs9g
      X4JgT5xiNoXgDtLYXSQycx65kMYbjqE1SnijCRrFLKHeAeqVEgG3SL7SYGRslJXFZeweH5OD
      cdY3d+gfjLO8WeEbL5/+je2wPF6tVgubqdOUdVxGg+2yQTzkIhDuQTBVmm2NcMhLoVCmJ9aD
      cMDg7AtjgPLuAj96/zpn+h28U1MIyhkMfx899hZreYVkwCQ5OEq62KSws4ykmrz5zTf55cUL
      9AxPc/sX/x/JU9/A4/WR3Vjkwyt3eOnVV7l97QqSYvCD3/kdAm7HoV/82soCJ848z707N5jo
      D7IlxjCya/hDEZxKkaVCm6RexCdqFIslRFWhUCqRT+8iigKvvTjLxzfuIth9KLksJY+A3Cyw
      viN8+ZBYnlBerxcAjw9MM8RszPYr13XsOF33f+rt3b/v//e/+SvajTqBaJzBPgefrCxzZ6/B
      f/8v3uJ/+p//V/67P/oj/tOf/VtsopOVVI2dtQ1ePzXEJ9fukEpluLac4bmBJKdPzfCXf/H/
      sLd+h3Ovvs477/yCYrXC6X4vqVKT4/1frkbzcII9SXoSx4n5RMr5PlzRYTzr1xF6++n1CgQH
      RxmuzBPr60eq5tF1Gy6PF80m0NfXR8AtMr+S4uSpWYrFOprswmaz4QlGCUTitNrtB25Lpy+E
      Wb5+X+wC6Srv/vQnVNom3/3eb3H1wjsIkUHC1NgqGxwfDDC/usvA0Dg/+8nfMHPyLK+/+iIf
      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
    </thumbnail>
  </thumbnails>
</workbook>
