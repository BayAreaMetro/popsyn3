<?xml version='1.0' encoding='utf-8' ?>

<!-- build 9300.16.0811.1521                                -->
<workbook source-build='9.3.6 (9300.16.0811.1521)' source-platform='win' version='9.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='year_2010_test_01' inline='true' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' version='9.3'>
      <connection class='textscan' directory='C:/Users/dory/Documents/GitHub/popsyn3/application/validation' filename='year_2010_test_01.csv' password='' server=''>
        <relation name='year_2010_test_01.csv' table='[year_2010_test_01#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='geography_index' ordinal='0' />
            <column datatype='integer' name='control_households' ordinal='1' />
            <column datatype='string' name='measure' ordinal='2' />
            <column datatype='integer' name='synthesized_households' ordinal='3' />
            <column datatype='string' name='geography' ordinal='4' />
            <column datatype='integer' name='control_persons' ordinal='5' />
            <column datatype='integer' name='synthesized_persons' ordinal='6' />
            <column datatype='string' name='measure_category' ordinal='7' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>geography_index</remote-name>
            <remote-type>20</remote-type>
            <local-name>[geography_index]</local-name>
            <parent-name>[year_2010_test_01.csv]</parent-name>
            <remote-alias>geography_index</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>control_households</remote-name>
            <remote-type>20</remote-type>
            <local-name>[control_households]</local-name>
            <parent-name>[year_2010_test_01.csv]</parent-name>
            <remote-alias>control_households</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>measure</remote-name>
            <remote-type>129</remote-type>
            <local-name>[measure]</local-name>
            <parent-name>[year_2010_test_01.csv]</parent-name>
            <remote-alias>measure</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>synthesized_households</remote-name>
            <remote-type>20</remote-type>
            <local-name>[synthesized_households]</local-name>
            <parent-name>[year_2010_test_01.csv]</parent-name>
            <remote-alias>synthesized_households</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>geography</remote-name>
            <remote-type>129</remote-type>
            <local-name>[geography]</local-name>
            <parent-name>[year_2010_test_01.csv]</parent-name>
            <remote-alias>geography</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>control_persons</remote-name>
            <remote-type>20</remote-type>
            <local-name>[control_persons]</local-name>
            <parent-name>[year_2010_test_01.csv]</parent-name>
            <remote-alias>control_persons</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>synthesized_persons</remote-name>
            <remote-type>20</remote-type>
            <local-name>[synthesized_persons]</local-name>
            <parent-name>[year_2010_test_01.csv]</parent-name>
            <remote-alias>synthesized_persons</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>measure_category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[measure_category]</local-name>
            <parent-name>[year_2010_test_01.csv]</parent-name>
            <remote-alias>measure_category</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[year_2010_test_01.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;' value='Total Error' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' value='Control Persons' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' value='Synthesized Households' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' value='Synthesized Persons' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1000925085783920642:qk]&quot;' value='Root Mean Square Error' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1004865667122827264:qk]&quot;' value='Percent Root Mean Square Error' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1021754165724004354:qk]&quot;' value='Pct RMSE' />
        </aliases>
      </column>
      <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
      </column>
      <column caption='Error Squared' datatype='integer' name='[Calculation_1000925085783777281]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Calculation_1000925085773357056]*[Calculation_1000925085773357056]' />
      </column>
      <column caption='Root Mean Square Error' datatype='real' name='[Calculation_1000925085783920642]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sqrt(avg([Calculation_1000925085783777281]))' />
      </column>
      <column caption='Relevant Control' datatype='integer' name='[Calculation_1021754165723889665]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IFNULL([control_households], [control_persons])' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
      <column caption='Geography' datatype='string' name='[geography]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;county&quot;' value='County' />
          <alias key='&quot;maz&quot;' value='MAZ' />
          <alias key='&quot;taz&quot;' value='TAZ' />
        </aliases>
      </column>
      <column caption='Geography Index' datatype='integer' name='[geography_index]' role='dimension' type='ordinal' />
      <column caption='Measure' datatype='string' name='[measure]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;age_00_18&quot;' value='Persons under age 18' />
          <alias key='&quot;age_19_64&quot;' value='Persons age 19 to 64' />
          <alias key='&quot;age_65_up&quot;' value='Persons age 65 and older' />
          <alias key='&quot;hh_income_quartile_1&quot;' value='Households in Lowest Income Quartile' />
          <alias key='&quot;hh_income_quartile_2&quot;' value='Households in Medium Low Income Quartile' />
          <alias key='&quot;hh_income_quartile_3&quot;' value='Households in Medium High Income Quartile' />
          <alias key='&quot;hh_income_quartile_4&quot;' value='Households in Highest Income Quartile' />
          <alias key='&quot;hh_size_1&quot;' value='Households with 1 Person' />
          <alias key='&quot;hh_size_2&quot;' value='Households with 2 People' />
          <alias key='&quot;hh_size_3&quot;' value='Households with 3 People' />
          <alias key='&quot;hh_size_4_plus&quot;' value='Households with 4 or more People' />
          <alias key='&quot;hh_workers_0&quot;' value='Households with 0 Workers' />
          <alias key='&quot;hh_workers_1&quot;' value='Households with 1 Worker' />
          <alias key='&quot;hh_workers_2&quot;' value='Households with 2 Workers' />
          <alias key='&quot;hh_workers_3_plus&quot;' value='Households with 3 or more Workers' />
          <alias key='&quot;households&quot;' value='Households' />
          <alias key='&quot;occupation_management&quot;' value='Persons in Management Occupations' />
          <alias key='&quot;occupation_manual&quot;' value='Persons in Manual Occupations' />
          <alias key='&quot;occupation_military&quot;' value='Persons in Military Occupations' />
          <alias key='&quot;occupation_professional&quot;' value='Persons in Professional Occupations' />
          <alias key='&quot;occupation_retail&quot;' value='Persons in Retail Occupations' />
          <alias key='&quot;occupation_services&quot;' value='Persons in Service Occupations' />
        </aliases>
      </column>
      <column caption='Measure Category' datatype='string' name='[measure_category]' role='dimension' type='nominal' />
      <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
      <column-instance column='[measure]' derivation='None' name='[none:measure:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_1000925085773357056]' derivation='Sum' name='[sum:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
      <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
      <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
      <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1000925085783920642]' derivation='User' name='[usr:Calculation_1000925085783920642:qk]' pivot='key' type='quantitative' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='C:\Users\dory\Documents\GitHub\popsyn3\application\validation\year_2010_test_01.tde' schema='Extract' tablename='Extract' update-time='10/14/2016 08:11:22 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Calculation_1000925085773357056]' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            <calculation column='[Calculation_1000925085783777281]' formula='[Calculation_1000925085773357056]*[Calculation_1000925085773357056]' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='58690' timestamp-start='2016-10-14 20:11:22.102' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Calculation_1000925085773357056</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Calculation_1000925085773357056]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Calculation_1000925085773357056</remote-alias>
              <ordinal>0</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>180</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>-38173</statistic>
                <statistic aggregation='Max' datatype='integer'>23485</statistic>
                <statistic aggregation='Count' datatype='integer'>53875</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Calculation_1000925085783777281</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Calculation_1000925085783777281]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Calculation_1000925085783777281</remote-alias>
              <ordinal>1</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>164</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1457177929</statistic>
                <statistic aggregation='Count' datatype='integer'>53875</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>7</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Number of Records</remote-name>
              <remote-type>16</remote-type>
              <local-name>[Number of Records]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Number of Records</remote-alias>
              <ordinal>2</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>58690.0</statistic>
                <statistic aggregation='Avg' datatype='real'>1.0</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.0</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.0</statistic>
                <statistic aggregation='Var' datatype='real'>0.0</statistic>
                <statistic aggregation='VarP' datatype='real'>0.0</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
                <statistic aggregation='Median' datatype='integer'>1</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>58690.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>control_households</remote-name>
              <remote-type>3</remote-type>
              <local-name>[control_households]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>control_households</remote-alias>
              <ordinal>3</ordinal>
              <family>year_2010_test_01.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>903</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>247197</statistic>
                <statistic aggregation='Count' datatype='integer'>58609</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>control_persons</remote-name>
              <remote-type>3</remote-type>
              <local-name>[control_persons]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>control_persons</remote-alias>
              <ordinal>4</ordinal>
              <family>year_2010_test_01.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>82</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>45</statistic>
                <statistic aggregation='Max' datatype='integer'>1132622</statistic>
                <statistic aggregation='Count' datatype='integer'>81</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>geography</remote-name>
              <remote-type>129</remote-type>
              <local-name>[geography]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>geography</remote-alias>
              <ordinal>5</ordinal>
              <family>year_2010_test_01.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;county&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;taz&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
                <statistic aggregation='Median' datatype='string'>&quot;maz&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>geography_index</remote-name>
              <remote-type>3</remote-type>
              <local-name>[geography_index]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>geography_index</remote-alias>
              <ordinal>6</ordinal>
              <family>year_2010_test_01.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>39785</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>835407834.0</statistic>
                <statistic aggregation='Avg' datatype='real'>14234.244913954677</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>39785</statistic>
                <statistic aggregation='Stdev' datatype='real'>12546.145974181052</statistic>
                <statistic aggregation='StdevP' datatype='real'>12546.03908885632</statistic>
                <statistic aggregation='Var' datatype='real'>157405778.80545941</statistic>
                <statistic aggregation='VarP' datatype='real'>157403096.81911072</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>21129387464506.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>6</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>measure</remote-name>
              <remote-type>129</remote-type>
              <local-name>[measure]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>measure</remote-alias>
              <ordinal>7</ordinal>
              <family>year_2010_test_01.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>22</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;age_00_18&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;occupation_services&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>measure_category</remote-name>
              <remote-type>129</remote-type>
              <local-name>[measure_category]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>measure_category</remote-alias>
              <ordinal>8</ordinal>
              <family>year_2010_test_01.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>6</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Households&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Persons by Occupation&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>synthesized_households</remote-name>
              <remote-type>3</remote-type>
              <local-name>[synthesized_households]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>synthesized_households</remote-alias>
              <ordinal>9</ordinal>
              <family>year_2010_test_01.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>908</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>248322</statistic>
                <statistic aggregation='Count' datatype='integer'>53794</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>5</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>synthesized_persons</remote-name>
              <remote-type>3</remote-type>
              <local-name>[synthesized_persons]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>synthesized_persons</remote-alias>
              <ordinal>10</ordinal>
              <family>year_2010_test_01.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>82</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>56</statistic>
                <statistic aggregation='Max' datatype='integer'>1094449</statistic>
                <statistic aggregation='Count' datatype='integer'>81</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.455414' measure-ordering='alphabetic' measure-percentage='0.544586' show-aliased-fields='true' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <sort class='manual' column='[none:measure:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;households&quot;</bucket>
            <bucket>&quot;hh_income_quartile_1&quot;</bucket>
            <bucket>&quot;hh_income_quartile_2&quot;</bucket>
            <bucket>&quot;hh_income_quartile_3&quot;</bucket>
            <bucket>&quot;hh_income_quartile_4&quot;</bucket>
            <bucket>&quot;hh_size_1&quot;</bucket>
            <bucket>&quot;hh_size_2&quot;</bucket>
            <bucket>&quot;hh_size_3&quot;</bucket>
            <bucket>&quot;hh_size_4_plus&quot;</bucket>
            <bucket>&quot;hh_workers_0&quot;</bucket>
            <bucket>&quot;hh_workers_1&quot;</bucket>
            <bucket>&quot;hh_workers_2&quot;</bucket>
            <bucket>&quot;hh_workers_3_plus&quot;</bucket>
            <bucket>&quot;age_00_18&quot;</bucket>
            <bucket>&quot;age_19_64&quot;</bucket>
            <bucket>&quot;age_65_up&quot;</bucket>
            <bucket>&quot;occupation_professional&quot;</bucket>
            <bucket>&quot;occupation_services&quot;</bucket>
            <bucket>&quot;occupation_manual&quot;</bucket>
            <bucket>&quot;occupation_retail&quot;</bucket>
            <bucket>&quot;occupation_management&quot;</bucket>
            <bucket>&quot;occupation_military&quot;</bucket>
          </dictionary>
        </sort>
      </default-sorts>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='controls.check sums'>
      <table>
        <view>
          <datasources>
            <datasource caption='year_2010_test_01' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' />
          </datasources>
          <datasource-dependencies datasource='textscan.1xanw0j0w61gh80zu3baj0rtv7sd'>
            <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            </column>
            <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
            <column caption='Measure Category' datatype='string' name='[measure_category]' role='dimension' type='nominal' />
            <column-instance column='[measure_category]' derivation='None' name='[none:measure_category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1000925085773357056]' derivation='Sum' name='[sum:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_households]' derivation='Sum' name='[sum:control_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]' value='74' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='116' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]' value='320' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='72' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Source Sans Pro' />
            <format attr='font-size' value='14' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[Multiple Values]' />
            </encodings>
            <customized-tooltip>
              <formatted-text />
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]</rows>
        <cols>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='controls.county deep dive'>
      <table>
        <view>
          <datasources>
            <datasource caption='year_2010_test_01' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' />
          </datasources>
          <datasource-dependencies datasource='textscan.1xanw0j0w61gh80zu3baj0rtv7sd'>
            <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            </column>
            <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
            <column caption='Geography' datatype='string' name='[geography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;county&quot;' value='County' />
                <alias key='&quot;maz&quot;' value='MAZ' />
                <alias key='&quot;taz&quot;' value='TAZ' />
              </aliases>
            </column>
            <column caption='Geography Index' datatype='integer' name='[geography_index]' role='dimension' type='ordinal' />
            <column caption='Measure' datatype='string' name='[measure]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;age_00_18&quot;' value='Persons under age 18' />
                <alias key='&quot;age_19_64&quot;' value='Persons age 19 to 64' />
                <alias key='&quot;age_65_up&quot;' value='Persons age 65 and older' />
                <alias key='&quot;hh_income_quartile_1&quot;' value='Households in Lowest Income Quartile' />
                <alias key='&quot;hh_income_quartile_2&quot;' value='Households in Medium Low Income Quartile' />
                <alias key='&quot;hh_income_quartile_3&quot;' value='Households in Medium High Income Quartile' />
                <alias key='&quot;hh_income_quartile_4&quot;' value='Households in Highest Income Quartile' />
                <alias key='&quot;hh_size_1&quot;' value='Households with 1 Person' />
                <alias key='&quot;hh_size_2&quot;' value='Households with 2 People' />
                <alias key='&quot;hh_size_3&quot;' value='Households with 3 People' />
                <alias key='&quot;hh_size_4_plus&quot;' value='Households with 4 or more People' />
                <alias key='&quot;hh_workers_0&quot;' value='Households with 0 Workers' />
                <alias key='&quot;hh_workers_1&quot;' value='Households with 1 Worker' />
                <alias key='&quot;hh_workers_2&quot;' value='Households with 2 Workers' />
                <alias key='&quot;hh_workers_3_plus&quot;' value='Households with 3 or more Workers' />
                <alias key='&quot;households&quot;' value='Households' />
                <alias key='&quot;occupation_management&quot;' value='Persons in Management Occupations' />
                <alias key='&quot;occupation_manual&quot;' value='Persons in Manual Occupations' />
                <alias key='&quot;occupation_military&quot;' value='Persons in Military Occupations' />
                <alias key='&quot;occupation_professional&quot;' value='Persons in Professional Occupations' />
                <alias key='&quot;occupation_retail&quot;' value='Persons in Retail Occupations' />
                <alias key='&quot;occupation_services&quot;' value='Persons in Service Occupations' />
              </aliases>
            </column>
            <column caption='Measure Category' datatype='string' name='[measure_category]' role='dimension' type='nominal' />
            <column-instance column='[geography]' derivation='None' name='[none:geography:nk]' pivot='key' type='nominal' />
            <column-instance column='[geography_index]' derivation='None' name='[none:geography_index:ok]' pivot='key' type='ordinal' />
            <column-instance column='[measure]' derivation='None' name='[none:measure:nk]' pivot='key' type='nominal' />
            <column-instance column='[measure_category]' derivation='None' name='[none:measure_category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1000925085773357056]' derivation='Sum' name='[sum:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_households]' derivation='Sum' name='[sum:control_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]'>
            <groupfilter function='member' level='[none:geography:nk]' member='&quot;county&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]'>
            <groupfilter function='level-members' level='[none:geography_index:ok]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</column>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]</column>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' value='54' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]' value='74' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]' value='31' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='111' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]' value='148' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' value='124' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]' value='164' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]' value='100' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='68' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Source Sans Pro' />
            <format attr='font-size' value='14' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[Multiple Values]' />
            </encodings>
            <customized-tooltip>
              <formatted-text />
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk] / ([textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk] / [textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]))</rows>
        <cols>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='controls.individual'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='false' fontsize='20'>Control Statistics: </run>
            <run fontsize='20'>&lt;Page Name&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='year_2010_test_01' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' />
          </datasources>
          <datasource-dependencies datasource='textscan.1xanw0j0w61gh80zu3baj0rtv7sd'>
            <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            </column>
            <column caption='Error Squared' datatype='integer' name='[Calculation_1000925085783777281]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Calculation_1000925085773357056]*[Calculation_1000925085773357056]' />
            </column>
            <column caption='Root Mean Square Error' datatype='real' name='[Calculation_1000925085783920642]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sqrt(avg([Calculation_1000925085783777281]))' />
            </column>
            <column caption='[Root Mean Square Error]/avg([Relevant Control])' datatype='real' name='[Calculation_1004865667122827264]' role='measure' type='quantitative' user:unnamed='controls.individual'>
              <calculation class='tableau' formula='[Calculation_1000925085783920642]/avg([Calculation_1021754165723889665])' />
            </column>
            <column caption='Relevant Control' datatype='integer' name='[Calculation_1021754165723889665]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([control_households], [control_persons])' />
            </column>
            <column-instance column='[Calculation_1000925085773357056]' derivation='Avg' name='[avg:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1021754165723889665]' derivation='Avg' name='[avg:Calculation_1021754165723889665:qk]' pivot='key' type='quantitative' />
            <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
            <column caption='Measure' datatype='string' name='[measure]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;age_00_18&quot;' value='Persons under age 18' />
                <alias key='&quot;age_19_64&quot;' value='Persons age 19 to 64' />
                <alias key='&quot;age_65_up&quot;' value='Persons age 65 and older' />
                <alias key='&quot;hh_income_quartile_1&quot;' value='Households in Lowest Income Quartile' />
                <alias key='&quot;hh_income_quartile_2&quot;' value='Households in Medium Low Income Quartile' />
                <alias key='&quot;hh_income_quartile_3&quot;' value='Households in Medium High Income Quartile' />
                <alias key='&quot;hh_income_quartile_4&quot;' value='Households in Highest Income Quartile' />
                <alias key='&quot;hh_size_1&quot;' value='Households with 1 Person' />
                <alias key='&quot;hh_size_2&quot;' value='Households with 2 People' />
                <alias key='&quot;hh_size_3&quot;' value='Households with 3 People' />
                <alias key='&quot;hh_size_4_plus&quot;' value='Households with 4 or more People' />
                <alias key='&quot;hh_workers_0&quot;' value='Households with 0 Workers' />
                <alias key='&quot;hh_workers_1&quot;' value='Households with 1 Worker' />
                <alias key='&quot;hh_workers_2&quot;' value='Households with 2 Workers' />
                <alias key='&quot;hh_workers_3_plus&quot;' value='Households with 3 or more Workers' />
                <alias key='&quot;households&quot;' value='Households' />
                <alias key='&quot;occupation_management&quot;' value='Persons in Management Occupations' />
                <alias key='&quot;occupation_manual&quot;' value='Persons in Manual Occupations' />
                <alias key='&quot;occupation_military&quot;' value='Persons in Military Occupations' />
                <alias key='&quot;occupation_professional&quot;' value='Persons in Professional Occupations' />
                <alias key='&quot;occupation_retail&quot;' value='Persons in Retail Occupations' />
                <alias key='&quot;occupation_services&quot;' value='Persons in Service Occupations' />
              </aliases>
            </column>
            <column-instance column='[measure]' derivation='None' name='[none:measure:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1000925085773357056]' derivation='Sum' name='[sum:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_households]' derivation='Sum' name='[sum:control_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1000925085783920642]' derivation='User' name='[usr:Calculation_1000925085783920642:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1004865667122827264]' derivation='User' name='[usr:Calculation_1004865667122827264:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1000925085773357056:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1021754165723889665:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1000925085783920642:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1004865667122827264:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1000925085773357056:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1021754165723889665:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1000925085783920642:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1004865667122827264:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='136' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='42' />
            <format attr='text-format' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1004865667122827264:qk]' value='p0.0%' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]' value='392' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]' value='88' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='320' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Source Sans Pro' />
            <format attr='font-size' value='14' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[Multiple Values]' />
            </encodings>
            <customized-tooltip>
              <formatted-text />
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</rows>
        <cols />
        <pages>
          <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='controls.summary'>
      <table>
        <view>
          <datasources>
            <datasource caption='year_2010_test_01' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' />
          </datasources>
          <datasource-dependencies datasource='textscan.1xanw0j0w61gh80zu3baj0rtv7sd'>
            <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            </column>
            <column caption='Error Squared' datatype='integer' name='[Calculation_1000925085783777281]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Calculation_1000925085773357056]*[Calculation_1000925085773357056]' />
            </column>
            <column caption='Root Mean Square Error' datatype='real' name='[Calculation_1000925085783920642]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sqrt(avg([Calculation_1000925085783777281]))' />
            </column>
            <column caption='Relevant Control' datatype='integer' name='[Calculation_1021754165723889665]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([control_households], [control_persons])' />
            </column>
            <column caption='[Root Mean Square Error]/avg([Relevant Control])' datatype='real' name='[Calculation_1021754165724004354]' role='measure' type='quantitative' user:unnamed='controls.summary'>
              <calculation class='tableau' formula='[Calculation_1000925085783920642]/avg([Calculation_1021754165723889665])' />
            </column>
            <column-instance column='[Calculation_1000925085773357056]' derivation='Avg' name='[avg:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
            <column caption='Geography' datatype='string' name='[geography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;county&quot;' value='County' />
                <alias key='&quot;maz&quot;' value='MAZ' />
                <alias key='&quot;taz&quot;' value='TAZ' />
              </aliases>
            </column>
            <column caption='Measure' datatype='string' name='[measure]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;age_00_18&quot;' value='Persons under age 18' />
                <alias key='&quot;age_19_64&quot;' value='Persons age 19 to 64' />
                <alias key='&quot;age_65_up&quot;' value='Persons age 65 and older' />
                <alias key='&quot;hh_income_quartile_1&quot;' value='Households in Lowest Income Quartile' />
                <alias key='&quot;hh_income_quartile_2&quot;' value='Households in Medium Low Income Quartile' />
                <alias key='&quot;hh_income_quartile_3&quot;' value='Households in Medium High Income Quartile' />
                <alias key='&quot;hh_income_quartile_4&quot;' value='Households in Highest Income Quartile' />
                <alias key='&quot;hh_size_1&quot;' value='Households with 1 Person' />
                <alias key='&quot;hh_size_2&quot;' value='Households with 2 People' />
                <alias key='&quot;hh_size_3&quot;' value='Households with 3 People' />
                <alias key='&quot;hh_size_4_plus&quot;' value='Households with 4 or more People' />
                <alias key='&quot;hh_workers_0&quot;' value='Households with 0 Workers' />
                <alias key='&quot;hh_workers_1&quot;' value='Households with 1 Worker' />
                <alias key='&quot;hh_workers_2&quot;' value='Households with 2 Workers' />
                <alias key='&quot;hh_workers_3_plus&quot;' value='Households with 3 or more Workers' />
                <alias key='&quot;households&quot;' value='Households' />
                <alias key='&quot;occupation_management&quot;' value='Persons in Management Occupations' />
                <alias key='&quot;occupation_manual&quot;' value='Persons in Manual Occupations' />
                <alias key='&quot;occupation_military&quot;' value='Persons in Military Occupations' />
                <alias key='&quot;occupation_professional&quot;' value='Persons in Professional Occupations' />
                <alias key='&quot;occupation_retail&quot;' value='Persons in Retail Occupations' />
                <alias key='&quot;occupation_services&quot;' value='Persons in Service Occupations' />
              </aliases>
            </column>
            <column-instance column='[geography]' derivation='None' name='[none:geography:nk]' pivot='key' type='nominal' />
            <column-instance column='[measure]' derivation='None' name='[none:measure:nk]' pivot='key' type='nominal' />
            <column-instance column='[control_households]' derivation='Sum' name='[sum:control_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1000925085783920642]' derivation='User' name='[usr:Calculation_1000925085783920642:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1021754165724004354]' derivation='User' name='[usr:Calculation_1021754165724004354:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1000925085773357056:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1021754165724004354:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1000925085773357056:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1000925085783920642:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='alphabetic' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' direction='DESC' />
          <slices>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' value='54' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='117' />
            <format attr='text-format' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1021754165724004354:qk]' value='p0.0%' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]' value='392' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='92' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' value='116' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Source Sans Pro' />
            <format attr='font-size' value='14' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[Multiple Values]' />
            </encodings>
            <customized-tooltip>
              <formatted-text />
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk] / [textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk])</rows>
        <cols>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</cols>
      </table>
    </worksheet>
  </worksheets>
  <windows source-height='28'>
    <window class='worksheet' name='controls.summary'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:Calculation_1006835991952629766:qk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='controls.individual'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card playctrls='0' trailctrls='0' type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='89'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>&quot;hh_size_2&quot;</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='controls.check sums'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='controls.county deep dive'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='controls.summary' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='controls.individual' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='controls.check sums' width='192'>
      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
      Ae3/A0pyUIRhktmeAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='controls.county deep dive' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
