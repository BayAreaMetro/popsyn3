<?xml version='1.0' encoding='utf-8' ?>

<!-- build 9300.16.0811.1521                                -->
<workbook source-build='9.3.6 (9300.16.0811.1521)' source-platform='win' version='9.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='year_2010_test_02' inline='true' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' version='9.3'>
      <connection class='textscan' directory='C:/Users/dory/Documents/GitHub/popsyn3/application/validation' filename='year_2010_test_02.csv' password='' server=''>
        <relation name='year_2010_test_02.csv' table='[year_2010_test_02#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='geography_index' ordinal='0' />
            <column datatype='integer' name='control_households' ordinal='1' />
            <column datatype='string' name='measure' ordinal='2' />
            <column datatype='integer' name='synthesized_households' ordinal='3' />
            <column datatype='string' name='geography' ordinal='4' />
            <column datatype='integer' name='control_persons' ordinal='5' />
            <column datatype='integer' name='synthesized_persons' ordinal='6' />
            <column datatype='string' name='measure_category' ordinal='7' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>geography_index</remote-name>
            <remote-type>20</remote-type>
            <local-name>[geography_index]</local-name>
            <parent-name>[year_2010_test_02.csv]</parent-name>
            <remote-alias>geography_index</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>control_households</remote-name>
            <remote-type>20</remote-type>
            <local-name>[control_households]</local-name>
            <parent-name>[year_2010_test_02.csv]</parent-name>
            <remote-alias>control_households</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>measure</remote-name>
            <remote-type>129</remote-type>
            <local-name>[measure]</local-name>
            <parent-name>[year_2010_test_02.csv]</parent-name>
            <remote-alias>measure</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>synthesized_households</remote-name>
            <remote-type>20</remote-type>
            <local-name>[synthesized_households]</local-name>
            <parent-name>[year_2010_test_02.csv]</parent-name>
            <remote-alias>synthesized_households</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>geography</remote-name>
            <remote-type>129</remote-type>
            <local-name>[geography]</local-name>
            <parent-name>[year_2010_test_02.csv]</parent-name>
            <remote-alias>geography</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>control_persons</remote-name>
            <remote-type>20</remote-type>
            <local-name>[control_persons]</local-name>
            <parent-name>[year_2010_test_02.csv]</parent-name>
            <remote-alias>control_persons</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>synthesized_persons</remote-name>
            <remote-type>20</remote-type>
            <local-name>[synthesized_persons]</local-name>
            <parent-name>[year_2010_test_02.csv]</parent-name>
            <remote-alias>synthesized_persons</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>measure_category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[measure_category]</local-name>
            <parent-name>[year_2010_test_02.csv]</parent-name>
            <remote-alias>measure_category</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[year_2010_test_02.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;' value='Total Error' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' value='Control Persons' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' value='Synthesized Households' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' value='Synthesized Persons' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1000925085783920642:qk]&quot;' value='Root Mean Square Error' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1004865667122827264:qk]&quot;' value='Percent Root Mean Square Error' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1021754165724004354:qk]&quot;' value='Pct RMSE' />
        </aliases>
      </column>
      <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
      </column>
      <column caption='Error Squared' datatype='integer' name='[Calculation_1000925085783777281]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Calculation_1000925085773357056]*[Calculation_1000925085773357056]' />
      </column>
      <column caption='Root Mean Square Error' datatype='real' name='[Calculation_1000925085783920642]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sqrt(avg([Calculation_1000925085783777281]))' />
      </column>
      <column caption='Relevant Control' datatype='integer' name='[Calculation_1021754165723889665]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IFNULL([control_households], [control_persons])' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
      <column caption='Geography' datatype='string' name='[geography]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;county&quot;' value='County' />
          <alias key='&quot;maz&quot;' value='MAZ' />
          <alias key='&quot;taz&quot;' value='TAZ' />
        </aliases>
      </column>
      <column caption='Geography Index' datatype='integer' name='[geography_index]' role='dimension' type='ordinal' />
      <column caption='Measure' datatype='string' name='[measure]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;age_00_18&quot;' value='Persons under age 18' />
          <alias key='&quot;age_19_64&quot;' value='Persons age 19 to 64' />
          <alias key='&quot;age_65_up&quot;' value='Persons age 65 and older' />
          <alias key='&quot;hh_income_quartile_1&quot;' value='Households in Lowest Income Quartile' />
          <alias key='&quot;hh_income_quartile_2&quot;' value='Households in Medium Low Income Quartile' />
          <alias key='&quot;hh_income_quartile_3&quot;' value='Households in Medium High Income Quartile' />
          <alias key='&quot;hh_income_quartile_4&quot;' value='Households in Highest Income Quartile' />
          <alias key='&quot;hh_size_1&quot;' value='Households with 1 Person' />
          <alias key='&quot;hh_size_2&quot;' value='Households with 2 People' />
          <alias key='&quot;hh_size_3&quot;' value='Households with 3 People' />
          <alias key='&quot;hh_size_4_plus&quot;' value='Households with 4 or more People' />
          <alias key='&quot;hh_workers_0&quot;' value='Households with 0 Workers' />
          <alias key='&quot;hh_workers_1&quot;' value='Households with 1 Worker' />
          <alias key='&quot;hh_workers_2&quot;' value='Households with 2 Workers' />
          <alias key='&quot;hh_workers_3_plus&quot;' value='Households with 3 or more Workers' />
          <alias key='&quot;households&quot;' value='Households' />
          <alias key='&quot;occupation_management&quot;' value='Persons in Management Occupations' />
          <alias key='&quot;occupation_manual&quot;' value='Persons in Manual Occupations' />
          <alias key='&quot;occupation_military&quot;' value='Persons in Military Occupations' />
          <alias key='&quot;occupation_professional&quot;' value='Persons in Professional Occupations' />
          <alias key='&quot;occupation_retail&quot;' value='Persons in Retail Occupations' />
          <alias key='&quot;occupation_services&quot;' value='Persons in Service Occupations' />
        </aliases>
      </column>
      <column caption='Measure Category' datatype='string' name='[measure_category]' role='dimension' type='nominal' />
      <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
      <column-instance column='[measure]' derivation='None' name='[none:measure:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_1000925085773357056]' derivation='Sum' name='[sum:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
      <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
      <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
      <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1000925085783920642]' derivation='User' name='[usr:Calculation_1000925085783920642:qk]' pivot='key' type='quantitative' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='C:\Users\dory\Documents\GitHub\popsyn3\application\validation\year_2010_test_02.tde' schema='Extract' tablename='Extract' update-time='10/14/2016 08:11:22 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Calculation_1000925085773357056]' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            <calculation column='[Calculation_1000925085783777281]' formula='[Calculation_1000925085773357056]*[Calculation_1000925085773357056]' />
            <calculation column='[Calculation_1021754165723889665]' formula='IFNULL([control_households], [control_persons])' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='58690' timestamp-start='2016-10-14 20:11:22.102' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Calculation_1000925085773357056</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Calculation_1000925085773357056]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Calculation_1000925085773357056</remote-alias>
              <ordinal>0</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>261</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>-20436</statistic>
                <statistic aggregation='Max' datatype='integer'>38058</statistic>
                <statistic aggregation='Count' datatype='integer'>53871</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Calculation_1000925085783777281</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Calculation_1000925085783777281]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Calculation_1000925085783777281</remote-alias>
              <ordinal>1</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>219</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1448411364</statistic>
                <statistic aggregation='Count' datatype='integer'>53871</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Calculation_1021754165723889665</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Calculation_1021754165723889665]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Calculation_1021754165723889665</remote-alias>
              <ordinal>2</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>975</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1132622</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Number of Records</remote-name>
              <remote-type>16</remote-type>
              <local-name>[Number of Records]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Number of Records</remote-alias>
              <ordinal>3</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>58690.0</statistic>
                <statistic aggregation='Avg' datatype='real'>1.0</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.0</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.0</statistic>
                <statistic aggregation='Var' datatype='real'>0.0</statistic>
                <statistic aggregation='VarP' datatype='real'>0.0</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
                <statistic aggregation='Median' datatype='integer'>1</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>58690.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>control_households</remote-name>
              <remote-type>3</remote-type>
              <local-name>[control_households]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>control_households</remote-alias>
              <ordinal>4</ordinal>
              <family>year_2010_test_02.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>903</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>247197</statistic>
                <statistic aggregation='Count' datatype='integer'>58609</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>control_persons</remote-name>
              <remote-type>3</remote-type>
              <local-name>[control_persons]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>control_persons</remote-alias>
              <ordinal>5</ordinal>
              <family>year_2010_test_02.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>82</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>45</statistic>
                <statistic aggregation='Max' datatype='integer'>1132622</statistic>
                <statistic aggregation='Count' datatype='integer'>81</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>geography</remote-name>
              <remote-type>129</remote-type>
              <local-name>[geography]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>geography</remote-alias>
              <ordinal>6</ordinal>
              <family>year_2010_test_02.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;county&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;taz&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
                <statistic aggregation='Median' datatype='string'>&quot;maz&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>geography_index</remote-name>
              <remote-type>3</remote-type>
              <local-name>[geography_index]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>geography_index</remote-alias>
              <ordinal>7</ordinal>
              <family>year_2010_test_02.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>39785</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>835407834.0</statistic>
                <statistic aggregation='Avg' datatype='real'>14234.244913954677</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>39785</statistic>
                <statistic aggregation='Stdev' datatype='real'>12546.145974181052</statistic>
                <statistic aggregation='StdevP' datatype='real'>12546.03908885632</statistic>
                <statistic aggregation='Var' datatype='real'>157405778.80545941</statistic>
                <statistic aggregation='VarP' datatype='real'>157403096.81911072</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>21129387464506.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>measure</remote-name>
              <remote-type>129</remote-type>
              <local-name>[measure]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>measure</remote-alias>
              <ordinal>8</ordinal>
              <family>year_2010_test_02.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>22</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;age_00_18&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;occupation_services&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>measure_category</remote-name>
              <remote-type>129</remote-type>
              <local-name>[measure_category]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>measure_category</remote-alias>
              <ordinal>9</ordinal>
              <family>year_2010_test_02.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>6</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Households&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Persons by Occupation&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>synthesized_households</remote-name>
              <remote-type>3</remote-type>
              <local-name>[synthesized_households]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>synthesized_households</remote-alias>
              <ordinal>10</ordinal>
              <family>year_2010_test_02.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>912</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>245362</statistic>
                <statistic aggregation='Count' datatype='integer'>53790</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>synthesized_persons</remote-name>
              <remote-type>3</remote-type>
              <local-name>[synthesized_persons]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>synthesized_persons</remote-alias>
              <ordinal>11</ordinal>
              <family>year_2010_test_02.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>82</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>71</statistic>
                <statistic aggregation='Max' datatype='integer'>1112186</statistic>
                <statistic aggregation='Count' datatype='integer'>81</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.454352' measure-ordering='alphabetic' measure-percentage='0.545648' show-aliased-fields='true' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <sort class='manual' column='[none:measure:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;households&quot;</bucket>
            <bucket>&quot;hh_income_quartile_1&quot;</bucket>
            <bucket>&quot;hh_income_quartile_2&quot;</bucket>
            <bucket>&quot;hh_income_quartile_3&quot;</bucket>
            <bucket>&quot;hh_income_quartile_4&quot;</bucket>
            <bucket>&quot;hh_size_1&quot;</bucket>
            <bucket>&quot;hh_size_2&quot;</bucket>
            <bucket>&quot;hh_size_3&quot;</bucket>
            <bucket>&quot;hh_size_4_plus&quot;</bucket>
            <bucket>&quot;hh_workers_0&quot;</bucket>
            <bucket>&quot;hh_workers_1&quot;</bucket>
            <bucket>&quot;hh_workers_2&quot;</bucket>
            <bucket>&quot;hh_workers_3_plus&quot;</bucket>
            <bucket>&quot;age_00_18&quot;</bucket>
            <bucket>&quot;age_19_64&quot;</bucket>
            <bucket>&quot;age_65_up&quot;</bucket>
            <bucket>&quot;occupation_professional&quot;</bucket>
            <bucket>&quot;occupation_services&quot;</bucket>
            <bucket>&quot;occupation_manual&quot;</bucket>
            <bucket>&quot;occupation_retail&quot;</bucket>
            <bucket>&quot;occupation_management&quot;</bucket>
            <bucket>&quot;occupation_military&quot;</bucket>
          </dictionary>
        </sort>
      </default-sorts>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='controls.check sums'>
      <table>
        <view>
          <datasources>
            <datasource caption='year_2010_test_02' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' />
          </datasources>
          <datasource-dependencies datasource='textscan.1xanw0j0w61gh80zu3baj0rtv7sd'>
            <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            </column>
            <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
            <column caption='Measure Category' datatype='string' name='[measure_category]' role='dimension' type='nominal' />
            <column-instance column='[measure_category]' derivation='None' name='[none:measure_category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1000925085773357056]' derivation='Sum' name='[sum:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_households]' derivation='Sum' name='[sum:control_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]' value='74' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='116' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]' value='320' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='72' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Source Sans Pro' />
            <format attr='font-size' value='14' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[Multiple Values]' />
            </encodings>
            <customized-tooltip>
              <formatted-text />
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]</rows>
        <cols>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='controls.county deep dive'>
      <table>
        <view>
          <datasources>
            <datasource caption='year_2010_test_02' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' />
          </datasources>
          <datasource-dependencies datasource='textscan.1xanw0j0w61gh80zu3baj0rtv7sd'>
            <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            </column>
            <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
            <column caption='Geography' datatype='string' name='[geography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;county&quot;' value='County' />
                <alias key='&quot;maz&quot;' value='MAZ' />
                <alias key='&quot;taz&quot;' value='TAZ' />
              </aliases>
            </column>
            <column caption='Geography Index' datatype='integer' name='[geography_index]' role='dimension' type='ordinal' />
            <column caption='Measure' datatype='string' name='[measure]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;age_00_18&quot;' value='Persons under age 18' />
                <alias key='&quot;age_19_64&quot;' value='Persons age 19 to 64' />
                <alias key='&quot;age_65_up&quot;' value='Persons age 65 and older' />
                <alias key='&quot;hh_income_quartile_1&quot;' value='Households in Lowest Income Quartile' />
                <alias key='&quot;hh_income_quartile_2&quot;' value='Households in Medium Low Income Quartile' />
                <alias key='&quot;hh_income_quartile_3&quot;' value='Households in Medium High Income Quartile' />
                <alias key='&quot;hh_income_quartile_4&quot;' value='Households in Highest Income Quartile' />
                <alias key='&quot;hh_size_1&quot;' value='Households with 1 Person' />
                <alias key='&quot;hh_size_2&quot;' value='Households with 2 People' />
                <alias key='&quot;hh_size_3&quot;' value='Households with 3 People' />
                <alias key='&quot;hh_size_4_plus&quot;' value='Households with 4 or more People' />
                <alias key='&quot;hh_workers_0&quot;' value='Households with 0 Workers' />
                <alias key='&quot;hh_workers_1&quot;' value='Households with 1 Worker' />
                <alias key='&quot;hh_workers_2&quot;' value='Households with 2 Workers' />
                <alias key='&quot;hh_workers_3_plus&quot;' value='Households with 3 or more Workers' />
                <alias key='&quot;households&quot;' value='Households' />
                <alias key='&quot;occupation_management&quot;' value='Persons in Management Occupations' />
                <alias key='&quot;occupation_manual&quot;' value='Persons in Manual Occupations' />
                <alias key='&quot;occupation_military&quot;' value='Persons in Military Occupations' />
                <alias key='&quot;occupation_professional&quot;' value='Persons in Professional Occupations' />
                <alias key='&quot;occupation_retail&quot;' value='Persons in Retail Occupations' />
                <alias key='&quot;occupation_services&quot;' value='Persons in Service Occupations' />
              </aliases>
            </column>
            <column caption='Measure Category' datatype='string' name='[measure_category]' role='dimension' type='nominal' />
            <column-instance column='[geography]' derivation='None' name='[none:geography:nk]' pivot='key' type='nominal' />
            <column-instance column='[geography_index]' derivation='None' name='[none:geography_index:ok]' pivot='key' type='ordinal' />
            <column-instance column='[measure]' derivation='None' name='[none:measure:nk]' pivot='key' type='nominal' />
            <column-instance column='[measure_category]' derivation='None' name='[none:measure_category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1000925085773357056]' derivation='Sum' name='[sum:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_households]' derivation='Sum' name='[sum:control_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]'>
            <groupfilter function='member' level='[none:geography:nk]' member='&quot;county&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]'>
            <groupfilter function='level-members' level='[none:geography_index:ok]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</column>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]</column>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' value='54' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]' value='74' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]' value='31' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='111' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]' value='148' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' value='124' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]' value='164' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]' value='100' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='68' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Source Sans Pro' />
            <format attr='font-size' value='14' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[Multiple Values]' />
            </encodings>
            <customized-tooltip>
              <formatted-text />
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk] / ([textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk] / [textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]))</rows>
        <cols>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='controls.individual'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='false' fontsize='20'>Control Statistics: </run>
            <run fontsize='20'>&lt;Page Name&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='year_2010_test_02' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' />
          </datasources>
          <datasource-dependencies datasource='textscan.1xanw0j0w61gh80zu3baj0rtv7sd'>
            <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            </column>
            <column caption='Error Squared' datatype='integer' name='[Calculation_1000925085783777281]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Calculation_1000925085773357056]*[Calculation_1000925085773357056]' />
            </column>
            <column caption='Root Mean Square Error' datatype='real' name='[Calculation_1000925085783920642]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sqrt(avg([Calculation_1000925085783777281]))' />
            </column>
            <column caption='[Root Mean Square Error]/avg([Relevant Control])' datatype='real' name='[Calculation_1004865667122827264]' role='measure' type='quantitative' user:unnamed='controls.individual'>
              <calculation class='tableau' formula='[Calculation_1000925085783920642]/avg([Calculation_1021754165723889665])' />
            </column>
            <column caption='Relevant Control' datatype='integer' name='[Calculation_1021754165723889665]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([control_households], [control_persons])' />
            </column>
            <column-instance column='[Calculation_1000925085773357056]' derivation='Avg' name='[avg:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1021754165723889665]' derivation='Avg' name='[avg:Calculation_1021754165723889665:qk]' pivot='key' type='quantitative' />
            <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
            <column caption='Measure' datatype='string' name='[measure]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;age_00_18&quot;' value='Persons under age 18' />
                <alias key='&quot;age_19_64&quot;' value='Persons age 19 to 64' />
                <alias key='&quot;age_65_up&quot;' value='Persons age 65 and older' />
                <alias key='&quot;hh_income_quartile_1&quot;' value='Households in Lowest Income Quartile' />
                <alias key='&quot;hh_income_quartile_2&quot;' value='Households in Medium Low Income Quartile' />
                <alias key='&quot;hh_income_quartile_3&quot;' value='Households in Medium High Income Quartile' />
                <alias key='&quot;hh_income_quartile_4&quot;' value='Households in Highest Income Quartile' />
                <alias key='&quot;hh_size_1&quot;' value='Households with 1 Person' />
                <alias key='&quot;hh_size_2&quot;' value='Households with 2 People' />
                <alias key='&quot;hh_size_3&quot;' value='Households with 3 People' />
                <alias key='&quot;hh_size_4_plus&quot;' value='Households with 4 or more People' />
                <alias key='&quot;hh_workers_0&quot;' value='Households with 0 Workers' />
                <alias key='&quot;hh_workers_1&quot;' value='Households with 1 Worker' />
                <alias key='&quot;hh_workers_2&quot;' value='Households with 2 Workers' />
                <alias key='&quot;hh_workers_3_plus&quot;' value='Households with 3 or more Workers' />
                <alias key='&quot;households&quot;' value='Households' />
                <alias key='&quot;occupation_management&quot;' value='Persons in Management Occupations' />
                <alias key='&quot;occupation_manual&quot;' value='Persons in Manual Occupations' />
                <alias key='&quot;occupation_military&quot;' value='Persons in Military Occupations' />
                <alias key='&quot;occupation_professional&quot;' value='Persons in Professional Occupations' />
                <alias key='&quot;occupation_retail&quot;' value='Persons in Retail Occupations' />
                <alias key='&quot;occupation_services&quot;' value='Persons in Service Occupations' />
              </aliases>
            </column>
            <column-instance column='[measure]' derivation='None' name='[none:measure:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1000925085773357056]' derivation='Sum' name='[sum:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_households]' derivation='Sum' name='[sum:control_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1000925085783920642]' derivation='User' name='[usr:Calculation_1000925085783920642:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1004865667122827264]' derivation='User' name='[usr:Calculation_1004865667122827264:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1000925085773357056:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1021754165723889665:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1000925085783920642:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1004865667122827264:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1000925085773357056:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1021754165723889665:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1000925085783920642:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1004865667122827264:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='136' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='42' />
            <format attr='text-format' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1004865667122827264:qk]' value='p0.0%' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]' value='392' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]' value='88' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='320' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Source Sans Pro' />
            <format attr='font-size' value='14' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[Multiple Values]' />
            </encodings>
            <customized-tooltip>
              <formatted-text />
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</rows>
        <cols />
        <pages>
          <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='controls.summary'>
      <table>
        <view>
          <datasources>
            <datasource caption='year_2010_test_02' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' />
          </datasources>
          <datasource-dependencies datasource='textscan.1xanw0j0w61gh80zu3baj0rtv7sd'>
            <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            </column>
            <column caption='Error Squared' datatype='integer' name='[Calculation_1000925085783777281]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Calculation_1000925085773357056]*[Calculation_1000925085773357056]' />
            </column>
            <column caption='Root Mean Square Error' datatype='real' name='[Calculation_1000925085783920642]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sqrt(avg([Calculation_1000925085783777281]))' />
            </column>
            <column caption='Relevant Control' datatype='integer' name='[Calculation_1021754165723889665]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([control_households], [control_persons])' />
            </column>
            <column caption='[Root Mean Square Error]/avg([Relevant Control])' datatype='real' name='[Calculation_1021754165724004354]' role='measure' type='quantitative' user:unnamed='controls.summary'>
              <calculation class='tableau' formula='[Calculation_1000925085783920642]/avg([Calculation_1021754165723889665])' />
            </column>
            <column-instance column='[Calculation_1000925085773357056]' derivation='Avg' name='[avg:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
            <column caption='Geography' datatype='string' name='[geography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;county&quot;' value='County' />
                <alias key='&quot;maz&quot;' value='MAZ' />
                <alias key='&quot;taz&quot;' value='TAZ' />
              </aliases>
            </column>
            <column caption='Measure' datatype='string' name='[measure]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;age_00_18&quot;' value='Persons under age 18' />
                <alias key='&quot;age_19_64&quot;' value='Persons age 19 to 64' />
                <alias key='&quot;age_65_up&quot;' value='Persons age 65 and older' />
                <alias key='&quot;hh_income_quartile_1&quot;' value='Households in Lowest Income Quartile' />
                <alias key='&quot;hh_income_quartile_2&quot;' value='Households in Medium Low Income Quartile' />
                <alias key='&quot;hh_income_quartile_3&quot;' value='Households in Medium High Income Quartile' />
                <alias key='&quot;hh_income_quartile_4&quot;' value='Households in Highest Income Quartile' />
                <alias key='&quot;hh_size_1&quot;' value='Households with 1 Person' />
                <alias key='&quot;hh_size_2&quot;' value='Households with 2 People' />
                <alias key='&quot;hh_size_3&quot;' value='Households with 3 People' />
                <alias key='&quot;hh_size_4_plus&quot;' value='Households with 4 or more People' />
                <alias key='&quot;hh_workers_0&quot;' value='Households with 0 Workers' />
                <alias key='&quot;hh_workers_1&quot;' value='Households with 1 Worker' />
                <alias key='&quot;hh_workers_2&quot;' value='Households with 2 Workers' />
                <alias key='&quot;hh_workers_3_plus&quot;' value='Households with 3 or more Workers' />
                <alias key='&quot;households&quot;' value='Households' />
                <alias key='&quot;occupation_management&quot;' value='Persons in Management Occupations' />
                <alias key='&quot;occupation_manual&quot;' value='Persons in Manual Occupations' />
                <alias key='&quot;occupation_military&quot;' value='Persons in Military Occupations' />
                <alias key='&quot;occupation_professional&quot;' value='Persons in Professional Occupations' />
                <alias key='&quot;occupation_retail&quot;' value='Persons in Retail Occupations' />
                <alias key='&quot;occupation_services&quot;' value='Persons in Service Occupations' />
              </aliases>
            </column>
            <column-instance column='[geography]' derivation='None' name='[none:geography:nk]' pivot='key' type='nominal' />
            <column-instance column='[measure]' derivation='None' name='[none:measure:nk]' pivot='key' type='nominal' />
            <column-instance column='[control_households]' derivation='Sum' name='[sum:control_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1000925085783920642]' derivation='User' name='[usr:Calculation_1000925085783920642:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1021754165724004354]' derivation='User' name='[usr:Calculation_1021754165724004354:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1000925085773357056:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1021754165724004354:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1000925085773357056:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1000925085783920642:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='alphabetic' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' direction='DESC' />
          <slices>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' value='54' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='117' />
            <format attr='text-format' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1021754165724004354:qk]' value='p0.0%' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]' value='392' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='92' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' value='116' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Source Sans Pro' />
            <format attr='font-size' value='14' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[Multiple Values]' />
            </encodings>
            <customized-tooltip>
              <formatted-text />
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk] / [textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk])</rows>
        <cols>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</cols>
      </table>
    </worksheet>
  </worksheets>
  <windows source-height='28'>
    <window class='worksheet' maximized='true' name='controls.summary'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:Calculation_1006835991952629766:qk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='controls.individual'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card playctrls='0' trailctrls='0' type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='89'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>&quot;hh_size_2&quot;</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='controls.check sums'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='controls.county deep dive'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='controls.summary' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='controls.individual' width='192'>
      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
      lEwcTmwAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='controls.check sums' width='192'>
      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
      Ae3/A0pyUIRhktmeAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='controls.county deep dive' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
