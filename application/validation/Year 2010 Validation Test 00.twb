<?xml version='1.0' encoding='utf-8' ?>

<!-- build 9300.16.0811.1521                                -->
<workbook source-build='9.3.6 (9300.16.0811.1521)' source-platform='win' version='9.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='year_2010_test_00' inline='true' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' version='9.3'>
      <connection class='textscan' directory='C:/Users/dory/Documents/GitHub/popsyn3/application/validation' filename='year_2010_test_00.csv' password='' server=''>
        <relation name='year_2010_test_00.csv' table='[year_2010_test_00#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='geography_index' ordinal='0' />
            <column datatype='integer' name='control_households' ordinal='1' />
            <column datatype='string' name='measure' ordinal='2' />
            <column datatype='integer' name='synthesized_households' ordinal='3' />
            <column datatype='string' name='geography' ordinal='4' />
            <column datatype='integer' name='control_persons' ordinal='5' />
            <column datatype='integer' name='synthesized_persons' ordinal='6' />
            <column datatype='string' name='measure_category' ordinal='7' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>geography_index</remote-name>
            <remote-type>20</remote-type>
            <local-name>[geography_index]</local-name>
            <parent-name>[year_2010_test_00.csv]</parent-name>
            <remote-alias>geography_index</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>control_households</remote-name>
            <remote-type>20</remote-type>
            <local-name>[control_households]</local-name>
            <parent-name>[year_2010_test_00.csv]</parent-name>
            <remote-alias>control_households</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>measure</remote-name>
            <remote-type>129</remote-type>
            <local-name>[measure]</local-name>
            <parent-name>[year_2010_test_00.csv]</parent-name>
            <remote-alias>measure</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>synthesized_households</remote-name>
            <remote-type>20</remote-type>
            <local-name>[synthesized_households]</local-name>
            <parent-name>[year_2010_test_00.csv]</parent-name>
            <remote-alias>synthesized_households</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>geography</remote-name>
            <remote-type>129</remote-type>
            <local-name>[geography]</local-name>
            <parent-name>[year_2010_test_00.csv]</parent-name>
            <remote-alias>geography</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>control_persons</remote-name>
            <remote-type>20</remote-type>
            <local-name>[control_persons]</local-name>
            <parent-name>[year_2010_test_00.csv]</parent-name>
            <remote-alias>control_persons</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>synthesized_persons</remote-name>
            <remote-type>20</remote-type>
            <local-name>[synthesized_persons]</local-name>
            <parent-name>[year_2010_test_00.csv]</parent-name>
            <remote-alias>synthesized_persons</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>measure_category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[measure_category]</local-name>
            <parent-name>[year_2010_test_00.csv]</parent-name>
            <remote-alias>measure_category</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[year_2010_test_00.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;' value='Total Error' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' value='Control Persons' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' value='Synthesized Households' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' value='Synthesized Persons' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1000925085783920642:qk]&quot;' value='Root Mean Square Error' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1004865667122827264:qk]&quot;' value='Percent Root Mean Square Error' />
          <alias key='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1021754165724004354:qk]&quot;' value='Pct RMSE' />
        </aliases>
      </column>
      <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
      </column>
      <column caption='Error Squared' datatype='integer' name='[Calculation_1000925085783777281]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Calculation_1000925085773357056]*[Calculation_1000925085773357056]' />
      </column>
      <column caption='Root Mean Square Error' datatype='real' name='[Calculation_1000925085783920642]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sqrt(avg([Calculation_1000925085783777281]))' />
      </column>
      <column caption='Relevant Control' datatype='integer' name='[Calculation_1021754165723889665]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IFNULL([control_households], [control_persons])' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
      <column caption='Geography' datatype='string' name='[geography]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;county&quot;' value='County' />
          <alias key='&quot;maz&quot;' value='MAZ' />
          <alias key='&quot;taz&quot;' value='TAZ' />
        </aliases>
      </column>
      <column caption='Geography Index' datatype='integer' name='[geography_index]' role='dimension' type='ordinal' />
      <column caption='Measure' datatype='string' name='[measure]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;age_00_18&quot;' value='Persons under age 18' />
          <alias key='&quot;age_19_64&quot;' value='Persons age 19 to 64' />
          <alias key='&quot;age_65_up&quot;' value='Persons age 65 and older' />
          <alias key='&quot;hh_income_quartile_1&quot;' value='Households in Lowest Income Quartile' />
          <alias key='&quot;hh_income_quartile_2&quot;' value='Households in Medium Low Income Quartile' />
          <alias key='&quot;hh_income_quartile_3&quot;' value='Households in Medium High Income Quartile' />
          <alias key='&quot;hh_income_quartile_4&quot;' value='Households in Highest Income Quartile' />
          <alias key='&quot;hh_size_1&quot;' value='Households with 1 Person' />
          <alias key='&quot;hh_size_2&quot;' value='Households with 2 People' />
          <alias key='&quot;hh_size_3&quot;' value='Households with 3 People' />
          <alias key='&quot;hh_size_4_plus&quot;' value='Households with 4 or more People' />
          <alias key='&quot;hh_workers_0&quot;' value='Households with 0 Workers' />
          <alias key='&quot;hh_workers_1&quot;' value='Households with 1 Worker' />
          <alias key='&quot;hh_workers_2&quot;' value='Households with 2 Workers' />
          <alias key='&quot;hh_workers_3_plus&quot;' value='Households with 3 or more Workers' />
          <alias key='&quot;households&quot;' value='Households' />
          <alias key='&quot;occupation_management&quot;' value='Persons in Management Occupations' />
          <alias key='&quot;occupation_manual&quot;' value='Persons in Manual Occupations' />
          <alias key='&quot;occupation_military&quot;' value='Persons in Military Occupations' />
          <alias key='&quot;occupation_professional&quot;' value='Persons in Professional Occupations' />
          <alias key='&quot;occupation_retail&quot;' value='Persons in Retail Occupations' />
          <alias key='&quot;occupation_services&quot;' value='Persons in Service Occupations' />
        </aliases>
      </column>
      <column caption='Measure Category' datatype='string' name='[measure_category]' role='dimension' type='nominal' />
      <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
      <column-instance column='[measure]' derivation='None' name='[none:measure:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_1000925085773357056]' derivation='Sum' name='[sum:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
      <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
      <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
      <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1000925085783920642]' derivation='User' name='[usr:Calculation_1000925085783920642:qk]' pivot='key' type='quantitative' />
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='C:\Users\dory\Documents\GitHub\popsyn3\application\validation\year_2010_test_00.tde' schema='Extract' tablename='Extract' update-time='10/14/2016 08:11:22 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Calculation_1000925085773357056]' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            <calculation column='[Calculation_1000925085783777281]' formula='[Calculation_1000925085773357056]*[Calculation_1000925085773357056]' />
            <calculation column='[Calculation_1021754165723889665]' formula='IFNULL([control_households], [control_persons])' />
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='58690' timestamp-start='2016-10-14 20:11:22.102' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Calculation_1000925085773357056</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Calculation_1000925085773357056]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Calculation_1000925085773357056</remote-alias>
              <ordinal>0</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>190</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>-36341</statistic>
                <statistic aggregation='Max' datatype='integer'>23065</statistic>
                <statistic aggregation='Count' datatype='integer'>53875</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Calculation_1000925085783777281</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Calculation_1000925085783777281]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Calculation_1000925085783777281</remote-alias>
              <ordinal>1</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>173</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1320668281</statistic>
                <statistic aggregation='Count' datatype='integer'>53875</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Calculation_1021754165723889665</remote-name>
              <remote-type>3</remote-type>
              <local-name>[Calculation_1021754165723889665]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Calculation_1021754165723889665</remote-alias>
              <ordinal>2</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>975</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>1132622</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Number of Records</remote-name>
              <remote-type>16</remote-type>
              <local-name>[Number of Records]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>Number of Records</remote-alias>
              <ordinal>3</ordinal>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>1</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>58690.0</statistic>
                <statistic aggregation='Avg' datatype='real'>1.0</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>1</statistic>
                <statistic aggregation='Stdev' datatype='real'>0.0</statistic>
                <statistic aggregation='StdevP' datatype='real'>0.0</statistic>
                <statistic aggregation='Var' datatype='real'>0.0</statistic>
                <statistic aggregation='VarP' datatype='real'>0.0</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
                <statistic aggregation='Median' datatype='integer'>1</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>58690.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint8&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>control_households</remote-name>
              <remote-type>3</remote-type>
              <local-name>[control_households]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>control_households</remote-alias>
              <ordinal>4</ordinal>
              <family>year_2010_test_00.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>903</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>0</statistic>
                <statistic aggregation='Max' datatype='integer'>247197</statistic>
                <statistic aggregation='Count' datatype='integer'>58609</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>control_persons</remote-name>
              <remote-type>3</remote-type>
              <local-name>[control_persons]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>control_persons</remote-alias>
              <ordinal>5</ordinal>
              <family>year_2010_test_00.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>82</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>45</statistic>
                <statistic aggregation='Max' datatype='integer'>1132622</statistic>
                <statistic aggregation='Count' datatype='integer'>81</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>geography</remote-name>
              <remote-type>129</remote-type>
              <local-name>[geography]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>geography</remote-alias>
              <ordinal>6</ordinal>
              <family>year_2010_test_00.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;county&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;taz&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
                <statistic aggregation='Median' datatype='string'>&quot;maz&quot;</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (ordered)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>0</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>geography_index</remote-name>
              <remote-type>3</remote-type>
              <local-name>[geography_index]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>geography_index</remote-alias>
              <ordinal>7</ordinal>
              <family>year_2010_test_00.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>39785</approx-count>
              <contains-null>false</contains-null>
              <statistics>
                <statistic aggregation='Sum' datatype='real'>835407834.0</statistic>
                <statistic aggregation='Avg' datatype='real'>14234.244913954677</statistic>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>39785</statistic>
                <statistic aggregation='Stdev' datatype='real'>12546.145974181052</statistic>
                <statistic aggregation='StdevP' datatype='real'>12546.03908885632</statistic>
                <statistic aggregation='Var' datatype='real'>157405778.80545941</statistic>
                <statistic aggregation='VarP' datatype='real'>157403096.81911072</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
                <statistic aggregation='SumXSqr' datatype='real'>21129387464506.0</statistic>
              </statistics>
              <attributes>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>3</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>measure</remote-name>
              <remote-type>129</remote-type>
              <local-name>[measure]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>measure</remote-alias>
              <ordinal>8</ordinal>
              <family>year_2010_test_00.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>22</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;age_00_18&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;occupation_services&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>measure_category</remote-name>
              <remote-type>129</remote-type>
              <local-name>[measure_category]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>measure_category</remote-alias>
              <ordinal>9</ordinal>
              <family>year_2010_test_00.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>6</approx-count>
              <scale>1</scale>
              <width>1073741823</width>
              <contains-null>false</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <statistics>
                <statistic aggregation='Min' datatype='string'>&quot;Households&quot;</statistic>
                <statistic aggregation='Max' datatype='string'>&quot;Persons by Occupation&quot;</statistic>
                <statistic aggregation='Count' datatype='integer'>58690</statistic>
              </statistics>
              <attributes>
                <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>synthesized_households</remote-name>
              <remote-type>3</remote-type>
              <local-name>[synthesized_households]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>synthesized_households</remote-alias>
              <ordinal>10</ordinal>
              <family>year_2010_test_00.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>904</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>1</statistic>
                <statistic aggregation='Max' datatype='integer'>248256</statistic>
                <statistic aggregation='Count' datatype='integer'>53794</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>2</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>synthesized_persons</remote-name>
              <remote-type>3</remote-type>
              <local-name>[synthesized_persons]</local-name>
              <parent-name>[Extract]</parent-name>
              <remote-alias>synthesized_persons</remote-alias>
              <ordinal>11</ordinal>
              <family>year_2010_test_00.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>81</approx-count>
              <contains-null>true</contains-null>
              <statistics>
                <statistic aggregation='Min' datatype='integer'>55</statistic>
                <statistic aggregation='Max' datatype='integer'>1096281</statistic>
                <statistic aggregation='Count' datatype='integer'>81</statistic>
              </statistics>
              <attributes>
                <attribute datatype='boolean' name='DebugRemoteMetadata (comparable)'>true</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;array&quot;</attribute>
                <attribute datatype='boolean' name='DebugRemoteMetadata (distinct)'>true</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (sort-position)'>4</attribute>
                <attribute datatype='string' name='DebugRemoteMetadata (sort-sense)'>&quot;asc&quot;</attribute>
                <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>1</attribute>
                <attribute datatype='string' name='DebugRemoteType'>&quot;sint32&quot;</attribute>
              </attributes>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.456212' measure-ordering='alphabetic' measure-percentage='0.543788' show-aliased-fields='true' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <sort class='manual' column='[none:measure:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;households&quot;</bucket>
            <bucket>&quot;hh_income_quartile_1&quot;</bucket>
            <bucket>&quot;hh_income_quartile_2&quot;</bucket>
            <bucket>&quot;hh_income_quartile_3&quot;</bucket>
            <bucket>&quot;hh_income_quartile_4&quot;</bucket>
            <bucket>&quot;hh_size_1&quot;</bucket>
            <bucket>&quot;hh_size_2&quot;</bucket>
            <bucket>&quot;hh_size_3&quot;</bucket>
            <bucket>&quot;hh_size_4_plus&quot;</bucket>
            <bucket>&quot;hh_workers_0&quot;</bucket>
            <bucket>&quot;hh_workers_1&quot;</bucket>
            <bucket>&quot;hh_workers_2&quot;</bucket>
            <bucket>&quot;hh_workers_3_plus&quot;</bucket>
            <bucket>&quot;age_00_18&quot;</bucket>
            <bucket>&quot;age_19_64&quot;</bucket>
            <bucket>&quot;age_65_up&quot;</bucket>
            <bucket>&quot;occupation_professional&quot;</bucket>
            <bucket>&quot;occupation_services&quot;</bucket>
            <bucket>&quot;occupation_manual&quot;</bucket>
            <bucket>&quot;occupation_retail&quot;</bucket>
            <bucket>&quot;occupation_management&quot;</bucket>
            <bucket>&quot;occupation_military&quot;</bucket>
          </dictionary>
        </sort>
      </default-sorts>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='controls.check sums'>
      <table>
        <view>
          <datasources>
            <datasource caption='year_2010_test_00' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' />
          </datasources>
          <datasource-dependencies datasource='textscan.1xanw0j0w61gh80zu3baj0rtv7sd'>
            <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            </column>
            <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
            <column caption='Measure Category' datatype='string' name='[measure_category]' role='dimension' type='nominal' />
            <column-instance column='[measure_category]' derivation='None' name='[none:measure_category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1000925085773357056]' derivation='Sum' name='[sum:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_households]' derivation='Sum' name='[sum:control_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]' value='74' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='116' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]' value='320' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='72' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Source Sans Pro' />
            <format attr='font-size' value='14' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[Multiple Values]' />
            </encodings>
            <customized-tooltip>
              <formatted-text />
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]</rows>
        <cols>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='controls.county deep dive'>
      <table>
        <view>
          <datasources>
            <datasource caption='year_2010_test_00' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' />
          </datasources>
          <datasource-dependencies datasource='textscan.1xanw0j0w61gh80zu3baj0rtv7sd'>
            <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            </column>
            <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
            <column caption='Geography' datatype='string' name='[geography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;county&quot;' value='County' />
                <alias key='&quot;maz&quot;' value='MAZ' />
                <alias key='&quot;taz&quot;' value='TAZ' />
              </aliases>
            </column>
            <column caption='Geography Index' datatype='integer' name='[geography_index]' role='dimension' type='ordinal' />
            <column caption='Measure' datatype='string' name='[measure]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;age_00_18&quot;' value='Persons under age 18' />
                <alias key='&quot;age_19_64&quot;' value='Persons age 19 to 64' />
                <alias key='&quot;age_65_up&quot;' value='Persons age 65 and older' />
                <alias key='&quot;hh_income_quartile_1&quot;' value='Households in Lowest Income Quartile' />
                <alias key='&quot;hh_income_quartile_2&quot;' value='Households in Medium Low Income Quartile' />
                <alias key='&quot;hh_income_quartile_3&quot;' value='Households in Medium High Income Quartile' />
                <alias key='&quot;hh_income_quartile_4&quot;' value='Households in Highest Income Quartile' />
                <alias key='&quot;hh_size_1&quot;' value='Households with 1 Person' />
                <alias key='&quot;hh_size_2&quot;' value='Households with 2 People' />
                <alias key='&quot;hh_size_3&quot;' value='Households with 3 People' />
                <alias key='&quot;hh_size_4_plus&quot;' value='Households with 4 or more People' />
                <alias key='&quot;hh_workers_0&quot;' value='Households with 0 Workers' />
                <alias key='&quot;hh_workers_1&quot;' value='Households with 1 Worker' />
                <alias key='&quot;hh_workers_2&quot;' value='Households with 2 Workers' />
                <alias key='&quot;hh_workers_3_plus&quot;' value='Households with 3 or more Workers' />
                <alias key='&quot;households&quot;' value='Households' />
                <alias key='&quot;occupation_management&quot;' value='Persons in Management Occupations' />
                <alias key='&quot;occupation_manual&quot;' value='Persons in Manual Occupations' />
                <alias key='&quot;occupation_military&quot;' value='Persons in Military Occupations' />
                <alias key='&quot;occupation_professional&quot;' value='Persons in Professional Occupations' />
                <alias key='&quot;occupation_retail&quot;' value='Persons in Retail Occupations' />
                <alias key='&quot;occupation_services&quot;' value='Persons in Service Occupations' />
              </aliases>
            </column>
            <column caption='Measure Category' datatype='string' name='[measure_category]' role='dimension' type='nominal' />
            <column-instance column='[geography]' derivation='None' name='[none:geography:nk]' pivot='key' type='nominal' />
            <column-instance column='[geography_index]' derivation='None' name='[none:geography_index:ok]' pivot='key' type='ordinal' />
            <column-instance column='[measure]' derivation='None' name='[none:measure:nk]' pivot='key' type='nominal' />
            <column-instance column='[measure_category]' derivation='None' name='[none:measure_category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1000925085773357056]' derivation='Sum' name='[sum:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_households]' derivation='Sum' name='[sum:control_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]'>
            <groupfilter function='member' level='[none:geography:nk]' member='&quot;county&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]'>
            <groupfilter function='level-members' level='[none:geography_index:ok]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</column>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]</column>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' value='54' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]' value='74' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]' value='31' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='111' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]' value='148' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' value='124' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]' value='164' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]' value='100' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='68' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Source Sans Pro' />
            <format attr='font-size' value='14' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[Multiple Values]' />
            </encodings>
            <customized-tooltip>
              <formatted-text />
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk] / ([textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk] / [textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]))</rows>
        <cols>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='controls.individual'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='false' fontsize='20'>Control Statistics: </run>
            <run fontsize='20'>&lt;Page Name&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='year_2010_test_00' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' />
          </datasources>
          <datasource-dependencies datasource='textscan.1xanw0j0w61gh80zu3baj0rtv7sd'>
            <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            </column>
            <column caption='Error Squared' datatype='integer' name='[Calculation_1000925085783777281]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Calculation_1000925085773357056]*[Calculation_1000925085773357056]' />
            </column>
            <column caption='Root Mean Square Error' datatype='real' name='[Calculation_1000925085783920642]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sqrt(avg([Calculation_1000925085783777281]))' />
            </column>
            <column caption='[Root Mean Square Error]/avg([Relevant Control])' datatype='real' name='[Calculation_1004865667122827264]' role='measure' type='quantitative' user:unnamed='controls.individual'>
              <calculation class='tableau' formula='[Calculation_1000925085783920642]/avg([Calculation_1021754165723889665])' />
            </column>
            <column caption='Relevant Control' datatype='integer' name='[Calculation_1021754165723889665]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([control_households], [control_persons])' />
            </column>
            <column-instance column='[Calculation_1000925085773357056]' derivation='Avg' name='[avg:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1021754165723889665]' derivation='Avg' name='[avg:Calculation_1021754165723889665:qk]' pivot='key' type='quantitative' />
            <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
            <column caption='Measure' datatype='string' name='[measure]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;age_00_18&quot;' value='Persons under age 18' />
                <alias key='&quot;age_19_64&quot;' value='Persons age 19 to 64' />
                <alias key='&quot;age_65_up&quot;' value='Persons age 65 and older' />
                <alias key='&quot;hh_income_quartile_1&quot;' value='Households in Lowest Income Quartile' />
                <alias key='&quot;hh_income_quartile_2&quot;' value='Households in Medium Low Income Quartile' />
                <alias key='&quot;hh_income_quartile_3&quot;' value='Households in Medium High Income Quartile' />
                <alias key='&quot;hh_income_quartile_4&quot;' value='Households in Highest Income Quartile' />
                <alias key='&quot;hh_size_1&quot;' value='Households with 1 Person' />
                <alias key='&quot;hh_size_2&quot;' value='Households with 2 People' />
                <alias key='&quot;hh_size_3&quot;' value='Households with 3 People' />
                <alias key='&quot;hh_size_4_plus&quot;' value='Households with 4 or more People' />
                <alias key='&quot;hh_workers_0&quot;' value='Households with 0 Workers' />
                <alias key='&quot;hh_workers_1&quot;' value='Households with 1 Worker' />
                <alias key='&quot;hh_workers_2&quot;' value='Households with 2 Workers' />
                <alias key='&quot;hh_workers_3_plus&quot;' value='Households with 3 or more Workers' />
                <alias key='&quot;households&quot;' value='Households' />
                <alias key='&quot;occupation_management&quot;' value='Persons in Management Occupations' />
                <alias key='&quot;occupation_manual&quot;' value='Persons in Manual Occupations' />
                <alias key='&quot;occupation_military&quot;' value='Persons in Military Occupations' />
                <alias key='&quot;occupation_professional&quot;' value='Persons in Professional Occupations' />
                <alias key='&quot;occupation_retail&quot;' value='Persons in Retail Occupations' />
                <alias key='&quot;occupation_services&quot;' value='Persons in Service Occupations' />
              </aliases>
            </column>
            <column-instance column='[measure]' derivation='None' name='[none:measure:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1000925085773357056]' derivation='Sum' name='[sum:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_households]' derivation='Sum' name='[sum:control_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1000925085783920642]' derivation='User' name='[usr:Calculation_1000925085783920642:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1004865667122827264]' derivation='User' name='[usr:Calculation_1004865667122827264:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1000925085773357056:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1021754165723889665:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1000925085783920642:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1004865667122827264:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:Calculation_1000925085773357056:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1000925085773357056:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1021754165723889665:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1000925085783920642:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1004865667122827264:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='136' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='42' />
            <format attr='text-format' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1004865667122827264:qk]' value='p0.0%' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]' value='392' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]' value='88' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='320' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Source Sans Pro' />
            <format attr='font-size' value='14' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[Multiple Values]' />
            </encodings>
            <customized-tooltip>
              <formatted-text />
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</rows>
        <cols />
        <pages>
          <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</column>
        </pages>
      </table>
    </worksheet>
    <worksheet name='controls.summary'>
      <table>
        <view>
          <datasources>
            <datasource caption='year_2010_test_00' name='textscan.1xanw0j0w61gh80zu3baj0rtv7sd' />
          </datasources>
          <datasource-dependencies datasource='textscan.1xanw0j0w61gh80zu3baj0rtv7sd'>
            <column caption='Error' datatype='integer' name='[Calculation_1000925085773357056]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([synthesized_households]-[control_households], [synthesized_persons]-[control_persons])' />
            </column>
            <column caption='Error Squared' datatype='integer' name='[Calculation_1000925085783777281]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Calculation_1000925085773357056]*[Calculation_1000925085773357056]' />
            </column>
            <column caption='Root Mean Square Error' datatype='real' name='[Calculation_1000925085783920642]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sqrt(avg([Calculation_1000925085783777281]))' />
            </column>
            <column caption='Relevant Control' datatype='integer' name='[Calculation_1021754165723889665]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IFNULL([control_households], [control_persons])' />
            </column>
            <column caption='[Root Mean Square Error]/avg([Relevant Control])' datatype='real' name='[Calculation_1021754165724004354]' role='measure' type='quantitative' user:unnamed='controls.summary'>
              <calculation class='tableau' formula='[Calculation_1000925085783920642]/avg([Calculation_1021754165723889665])' />
            </column>
            <column-instance column='[Calculation_1000925085773357056]' derivation='Avg' name='[avg:Calculation_1000925085773357056:qk]' pivot='key' type='quantitative' />
            <column caption='Control Households' datatype='integer' name='[control_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Control Persons' datatype='integer' name='[control_persons]' role='measure' type='quantitative' />
            <column caption='Geography' datatype='string' name='[geography]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;county&quot;' value='County' />
                <alias key='&quot;maz&quot;' value='MAZ' />
                <alias key='&quot;taz&quot;' value='TAZ' />
              </aliases>
            </column>
            <column caption='Measure' datatype='string' name='[measure]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;age_00_18&quot;' value='Persons under age 18' />
                <alias key='&quot;age_19_64&quot;' value='Persons age 19 to 64' />
                <alias key='&quot;age_65_up&quot;' value='Persons age 65 and older' />
                <alias key='&quot;hh_income_quartile_1&quot;' value='Households in Lowest Income Quartile' />
                <alias key='&quot;hh_income_quartile_2&quot;' value='Households in Medium Low Income Quartile' />
                <alias key='&quot;hh_income_quartile_3&quot;' value='Households in Medium High Income Quartile' />
                <alias key='&quot;hh_income_quartile_4&quot;' value='Households in Highest Income Quartile' />
                <alias key='&quot;hh_size_1&quot;' value='Households with 1 Person' />
                <alias key='&quot;hh_size_2&quot;' value='Households with 2 People' />
                <alias key='&quot;hh_size_3&quot;' value='Households with 3 People' />
                <alias key='&quot;hh_size_4_plus&quot;' value='Households with 4 or more People' />
                <alias key='&quot;hh_workers_0&quot;' value='Households with 0 Workers' />
                <alias key='&quot;hh_workers_1&quot;' value='Households with 1 Worker' />
                <alias key='&quot;hh_workers_2&quot;' value='Households with 2 Workers' />
                <alias key='&quot;hh_workers_3_plus&quot;' value='Households with 3 or more Workers' />
                <alias key='&quot;households&quot;' value='Households' />
                <alias key='&quot;occupation_management&quot;' value='Persons in Management Occupations' />
                <alias key='&quot;occupation_manual&quot;' value='Persons in Manual Occupations' />
                <alias key='&quot;occupation_military&quot;' value='Persons in Military Occupations' />
                <alias key='&quot;occupation_professional&quot;' value='Persons in Professional Occupations' />
                <alias key='&quot;occupation_retail&quot;' value='Persons in Retail Occupations' />
                <alias key='&quot;occupation_services&quot;' value='Persons in Service Occupations' />
              </aliases>
            </column>
            <column-instance column='[geography]' derivation='None' name='[none:geography:nk]' pivot='key' type='nominal' />
            <column-instance column='[measure]' derivation='None' name='[none:measure:nk]' pivot='key' type='nominal' />
            <column-instance column='[control_households]' derivation='Sum' name='[sum:control_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[control_persons]' derivation='Sum' name='[sum:control_persons:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_households]' derivation='Sum' name='[sum:synthesized_households:qk]' pivot='key' type='quantitative' />
            <column-instance column='[synthesized_persons]' derivation='Sum' name='[sum:synthesized_persons:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Households' datatype='integer' name='[synthesized_households]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Synthesized Persons' datatype='integer' name='[synthesized_persons]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1000925085783920642]' derivation='User' name='[usr:Calculation_1000925085783920642:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1021754165724004354]' derivation='User' name='[usr:Calculation_1021754165724004354:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1000925085773357056:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1021754165724004354:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_households:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:control_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[sum:synthesized_persons:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[avg:Calculation_1000925085773357056:qk]&quot;</bucket>
              <bucket>&quot;[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1000925085783920642:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <sort class='alphabetic' column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' direction='DESC' />
          <slices>
            <column>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' value='54' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='117' />
            <format attr='text-format' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[usr:Calculation_1021754165724004354:qk]' value='p0.0%' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]' value='392' />
            <format attr='height' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]' value='92' />
            <format attr='width' field='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]' value='116' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-family' value='Source Sans Pro' />
            <format attr='font-size' value='14' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[Multiple Values]' />
            </encodings>
            <customized-tooltip>
              <formatted-text />
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk] / [textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk])</rows>
        <cols>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</cols>
      </table>
    </worksheet>
  </worksheets>
  <windows source-height='28'>
    <window class='worksheet' name='controls.summary'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:Calculation_1006835991952629766:qk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='controls.individual'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card playctrls='0' trailctrls='0' type='currpage' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='89'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>&quot;hh_size_2&quot;</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[:Measure Names]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='controls.check sums'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='controls.county deep dive'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:geography_index:ok]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure:nk]</field>
            <field>[textscan.1xanw0j0w61gh80zu3baj0rtv7sd].[none:measure_category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='controls.summary' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='controls.individual' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='controls.check sums' width='192'>
      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
      Ae3/A0pyUIRhktmeAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='controls.county deep dive' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
